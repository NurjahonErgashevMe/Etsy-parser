"""
–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞
"""
import logging
from datetime import datetime
from typing import List
from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError

from bot.database import BotDatabase
from models.product import Product

class ParsingLogger:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    
    def __init__(self, notification_service, user_id: int):
        self.notification_service = notification_service
        self.user_id = user_id
        self.log_message = None
        self.log_entries = []
        self.max_message_length = 4000  # –õ–∏–º–∏—Ç Telegram ~4096, –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
        
    async def start_logging(self):
        """–ù–∞—á–∏–Ω–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        initial_text = "üöÄ <b>–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞</b>\n\nüìã <b>–õ–æ–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞:</b>\n\n‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è..."
        
        self.log_message = await self.notification_service.send_message_to_user(
            self.user_id, initial_text
        )
        
        if self.log_message:
            self.log_entries.append("‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
    
    async def add_log_entry(self, entry: str):
        """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥"""
        if not self.log_message:
            return
            
        self.log_entries.append(entry)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        new_text = "üöÄ <b>–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞</b>\n\nüìã <b>–õ–æ–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞:</b>\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏, —Å–ª–µ–¥—è –∑–∞ –ª–∏–º–∏—Ç–æ–º –¥–ª–∏–Ω—ã
        temp_entries = []
        temp_length = len(new_text)
        
        # –ò–¥–µ–º —Å –∫–æ–Ω—Ü–∞, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –∑–∞–ø–∏—Å–∏
        for entry in reversed(self.log_entries):
            entry_length = len(entry) + 1  # +1 –¥–ª—è \n
            if temp_length + entry_length > self.max_message_length:
                break
            temp_entries.insert(0, entry)
            temp_length += entry_length
        
        # –ï—Å–ª–∏ –Ω–µ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–º–µ—Å—Ç–∏–ª–∏—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        if len(temp_entries) < len(self.log_entries):
            new_text += "...\n"
        
        new_text += "\n".join(temp_entries)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await self.notification_service.edit_message(
            self.user_id, 
            self.log_message.message_id, 
            new_text
        )
    
    async def finish_logging(self, total_new_products: int):
        """–ó–∞–≤–µ—Ä—à–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        if total_new_products > 0:
            final_entry = f"‚úÖ <b>–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!</b> –ù–∞–π–¥–µ–Ω–æ {total_new_products} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"
        else:
            final_entry = "‚úÖ <b>–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!</b> –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
        await self.add_log_entry(final_entry)

class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö"""
    
    def __init__(self, bot: Bot, db: BotDatabase):
        self.bot = bot
        self.db = db
    
    async def send_message_to_user(self, user_id: int, message: str, parse_mode: str = "HTML") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            sent_message = await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode=parse_mode
            )
            return sent_message
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False

    async def edit_message(self, chat_id: int, message_id: int, new_text: str, parse_mode: str = "HTML") -> bool:
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            await self.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=new_text,
                parse_mode=parse_mode
            )
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def send_new_product_notification(self, product: Product) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Ç–æ–≤–∞—Ä–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admins = await self.db.get_all_admins()
            
            if not admins:
                logging.warning("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = self._format_notification_message(product)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            sent_count = 0
            for admin_id, _ in admins:
                try:
                    await self.bot.send_message(
                        chat_id=admin_id,
                        text=message_text,
                        parse_mode="HTML",
                        disable_web_page_preview=False
                    )
                    sent_count += 1
                    logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
                    
                except TelegramForbiddenError:
                    logging.warning(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                except TelegramBadRequest as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
                except Exception as e:
                    logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
            
            logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –∏–∑ {len(admins)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return sent_count > 0
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ–≤–∞—Ä–µ: {e}")
            return False
    
    async def send_multiple_products_notification(self, products: List[Product]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö"""
        if not products:
            return False
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admins = await self.db.get_all_admins()
            
            if not admins:
                logging.warning("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                return False
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
            shops_products = {}
            for product in products:
                if product.shop_name not in shops_products:
                    shops_products[product.shop_name] = []
                shops_products[product.shop_name].append(product)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
            sent_count = 0
            for shop_name, shop_products in shops_products.items():
                message_text = self._format_multiple_products_message(shop_name, shop_products)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                for admin_id, _ in admins:
                    try:
                        await self.bot.send_message(
                            chat_id=admin_id,
                            text=message_text,
                            parse_mode="HTML",
                            disable_web_page_preview=False
                        )
                        sent_count += 1
                        
                    except TelegramForbiddenError:
                        logging.warning(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                    except TelegramBadRequest as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
                    except Exception as e:
                        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
            
            logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ {len(products)} —Ç–æ–≤–∞—Ä–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
            return sent_count > 0
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç–æ–≤–∞—Ä–∞—Ö: {e}")
            return False
    
    def _format_notification_message(self, product: Product) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Ç–æ–≤–∞—Ä–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"""
        discovery_time = datetime.now().strftime("%d.%m.%Y %H:%M")
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –∑–∞–≥–æ–ª–æ–≤–æ–∫, –º–∞–≥–∞–∑–∏–Ω, —Å—Å—ã–ª–∫–∞, –≤—Ä–µ–º—è
        message = f"""üÜï <b>–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ {product.shop_name}</b>

<a href="{product.url}">{product.title[:80]}{'...' if len(product.title) > 80 else ''}</a>

üïê {discovery_time}"""
        
        return message
    
    def _format_multiple_products_message(self, shop_name: str, products: List[Product]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö"""
        discovery_time = datetime.now().strftime("%d.%m.%Y %H:%M")
        
        message = f"""üÜï <b>–ù–∞–π–¥–µ–Ω–æ {len(products)} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ {shop_name}</b>

üïê {discovery_time}

"""
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        for i, product in enumerate(products[:5]):
            title = product.title[:60] + '...' if len(product.title) > 60 else product.title
            message += f"‚Ä¢ <a href='{product.url}'>{title}</a>\n"
        
        if len(products) > 5:
            message += f"\n... –∏ –µ—â–µ {len(products) - 5} —Ç–æ–≤–∞—Ä–æ–≤"
        
        return message
    
    async def send_parsing_started_notification(self, user_id: int = None) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ (—Ç–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É –∏–ª–∏ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º)"""
        try:
            message = f"""üöÄ <b>–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞</b>

üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤..."""
            
            if user_id:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É
                return await self.send_message_to_user(user_id, message)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é)
                admins = await self.db.get_all_admins()
                if not admins:
                    return False
                
                for admin_id, _ in admins:
                    await self.send_message_to_user(admin_id, message)
                
                return True
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return False
    
    async def send_parsing_completed_notification(self, total_new_products: int, user_id: int = None) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ (—Ç–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É –∏–ª–∏ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º)"""
        try:
            if total_new_products > 0:
                message = f"""‚úÖ <b>–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω</b>

üÜï –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {total_new_products}"""
            else:
                message = f"""‚úÖ <b>–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω</b>

üì≠ –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"""
            
            if user_id:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É
                return await self.send_message_to_user(user_id, message)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é)
                admins = await self.db.get_all_admins()
                if not admins:
                    return False
                
                for admin_id, _ in admins:
                    await self.send_message_to_user(admin_id, message)
                
                return True
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return False