"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞
"""
import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.database import BotDatabase
from bot.keyboards import (
    get_main_menu, get_settings_menu, get_admin_menu,
    get_days_keyboard, get_time_keyboard, get_back_keyboard,
    get_description_keyboard, get_admin_list_keyboard, get_confirm_delete_keyboard,
    get_analytics_menu, get_analytics_settings_menu
)
from services.analytics_service import AnalyticsService

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AdminStates(StatesGroup):
    waiting_for_admin_id = State()
    waiting_for_description = State()

class ScheduleStates(StatesGroup):
    waiting_for_day = State()
    waiting_for_time = State()
    waiting_for_custom_time = State()

class AnalyticsScheduleStates(StatesGroup):
    waiting_for_day = State()
    waiting_for_time = State()
    waiting_for_custom_time = State()

router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message, db: BotDatabase):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n\n"
        "ü§ñ –≠—Ç–æ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: Message, db: BotDatabase):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if not await db.is_admin(message.from_user.id):
        return
    
    await message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:",
        reply_markup=get_settings_menu()
    )

@router.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏")
async def admin_menu(message: Message, db: BotDatabase):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
    if not await db.is_admin(message.from_user.id):
        return
    
    await message.answer(
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_menu()
    )

@router.message(F.text == "üïê –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def schedule_setup(message: Message, state: FSMContext, db: BotDatabase):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    if not await db.is_admin(message.from_user.id):
        return
    
    await message.answer(
        "üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:",
        reply_markup=get_days_keyboard()
    )
    await state.set_state(ScheduleStates.waiting_for_day)

@router.callback_query(F.data.startswith("day_"), StateFilter(ScheduleStates.waiting_for_day))
async def process_day_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    day = callback.data.split("_")[1]
    await state.update_data(selected_day=day)
    
    day_names = {
        "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫", 
        "wednesday": "–°—Ä–µ–¥–∞",
        "thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
        "friday": "–ü—è—Ç–Ω–∏—Ü–∞",
        "saturday": "–°—É–±–±–æ—Ç–∞",
        "sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    
    await callback.message.edit_text(
        f"üìÖ –í—ã–±—Ä–∞–Ω –¥–µ–Ω—å: {day_names.get(day, day)}\n\n"
        "üïê –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:",
        reply_markup=get_time_keyboard()
    )
    await state.set_state(ScheduleStates.waiting_for_time)
    await callback.answer()

@router.callback_query(F.data.startswith("time_"), StateFilter(ScheduleStates.waiting_for_time))
async def process_time_selection(callback: CallbackQuery, state: FSMContext, db: BotDatabase, scheduler=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    time = callback.data.split("_")[1]
    data = await state.get_data()
    selected_day = data.get("selected_day")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success = await db.update_scheduler_settings(time, selected_day, callback.from_user.id)
    
    day_names = {
        "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
        "wednesday": "–°—Ä–µ–¥–∞", 
        "thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
        "friday": "–ü—è—Ç–Ω–∏—Ü–∞",
        "saturday": "–°—É–±–±–æ—Ç–∞",
        "sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    
    if success:
        await callback.message.edit_text(
            f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!\n\n"
            f"üìÖ –î–µ–Ω—å: {day_names.get(selected_day, selected_day)}\n"
            f"üïê –í—Ä–µ–º—è: {time}\n\n"
            f"üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è..."
        )
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        if scheduler:
            try:
                await scheduler.restart_scheduler()
                await callback.message.edit_text(
                    f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!\n\n"
                    f"üìÖ –î–µ–Ω—å: {day_names.get(selected_day, selected_day)}\n"
                    f"üïê –í—Ä–µ–º—è: {time}\n\n"
                    f"‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω."
                )
            except Exception as e:
                await callback.message.edit_text(
                    f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.\n\n"
                    f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}\n\n"
                    f"–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π."
                )
        
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
    
    await state.clear()
    await callback.answer()

@router.message(F.text == "üöÄ –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥")
async def start_manual_parsing(message: Message, db: BotDatabase, scheduler=None):
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Ä–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    if not await db.is_admin(message.from_user.id):
        return
    
    if scheduler:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞
        if scheduler.parser_lock.is_running():
            await message.answer(
                "‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω!\n\n"
                "–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞."
            )
            return
        
        await message.answer(
            "üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...\n\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö."
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
        import asyncio
        
        async def run_parsing_async():
            """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
            try:
                await scheduler.scheduled_parsing_job(user_id=message.from_user.id)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
                await scheduler.notification_service.send_message_to_user(
                    message.from_user.id,
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ:\n\nüö® {str(e)[:200]}"
                )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(run_parsing_async())
    else:
        await message.answer("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.")

@router.message(F.text == "üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
async def current_settings(message: Message, db: BotDatabase):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    if not await db.is_admin(message.from_user.id):
        return
    
    schedule_time, schedule_day = await db.get_scheduler_settings()
    
    day_names = {
        "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
        "wednesday": "–°—Ä–µ–¥–∞",
        "thursday": "–ß–µ—Ç–≤–µ—Ä–≥", 
        "friday": "–ü—è—Ç–Ω–∏—Ü–∞",
        "saturday": "–°—É–±–±–æ—Ç–∞",
        "sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    
    await message.answer(
        f"üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
        f"üìÖ –î–µ–Ω—å: {day_names.get(schedule_day, schedule_day)}\n"
        f"üïê –í—Ä–µ–º—è: {schedule_time}\n\n"
        f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    )

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def add_admin_start(message: Message, state: FSMContext, db: BotDatabase):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not await db.is_admin(message.from_user.id):
        return
    
    await message.answer(
        "üë§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
        "üí° ID –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —É @userinfobot",
        reply_markup=get_back_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_admin_id)

@router.message(StateFilter(AdminStates.waiting_for_admin_id))
async def process_admin_id(message: Message, state: FSMContext, db: BotDatabase):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await admin_menu(message, db)
        return
    
    try:
        user_id = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if await db.is_admin(user_id):
            await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ–ø–∏—Å–∞–Ω–∏—è
        await state.update_data(admin_id=user_id)
        
        await message.answer(
            "üìù –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–º—è):\n\n"
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–µ –∑–∞–±—ã—Ç—å, –∫—Ç–æ —ç—Ç–æ.",
            reply_markup=get_description_keyboard()
        )
        await state.set_state(AdminStates.waiting_for_description)
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
            "–ü—Ä–∏–º–µ—Ä: 123456789"
        )

@router.message(StateFilter(AdminStates.waiting_for_description))
async def process_admin_description(message: Message, state: FSMContext, db: BotDatabase):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await admin_menu(message, db)
        return
    
    data = await state.get_data()
    user_id = data.get("admin_id")
    description = message.text.strip()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    success = await db.add_admin(user_id, None, description, message.from_user.id)
    
    if success:
        await message.answer(
            f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üë§ ID: {user_id}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}",
            reply_markup=get_admin_menu()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_admin_menu()
        )
    
    await state.clear()

@router.callback_query(F.data == "skip_description")
async def skip_description(callback: CallbackQuery, state: FSMContext, db: BotDatabase):
    """–ü—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    data = await state.get_data()
    user_id = data.get("admin_id")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è
    success = await db.add_admin(user_id, None, None, callback.from_user.id)
    
    if success:
        await callback.message.edit_text(
            f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üë§ ID: {user_id}"
        )
        await callback.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.", reply_markup=get_admin_menu())
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await callback.message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=get_admin_menu())
    
    await state.clear()
    await callback.answer()

@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤")
async def list_admins(message: Message, db: BotDatabase):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if not await db.is_admin(message.from_user.id):
        return
    
    admins = await db.get_all_admins()
    db_admins = await db.get_db_admins_with_description()
    
    if not admins:
        await message.answer("üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.")
        return
    
    admin_list = "üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
    
    # –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω
    from bot.config import config
    admin_list += f"üëë –ì–ª–∞–≤–Ω—ã–π: {config.ADMIN_ID}\n\n"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω—ã
    if db_admins:
        admin_list += "üë• –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ:\n"
        for user_id, username, description in db_admins:
            desc_text = f" ({description})" if description else ""
            admin_list += f"‚Ä¢ {user_id}{desc_text}\n"
    else:
        admin_list += "üë• –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ—Ç"
    
    await message.answer(admin_list)

@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def delete_admin_start(message: Message, db: BotDatabase):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not await db.is_admin(message.from_user.id):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ (–≥–ª–∞–≤–Ω–æ–≥–æ —É–¥–∞–ª–∏—Ç—å –Ω–µ–ª—å–∑—è)
    db_admins = await db.get_db_admins_with_description()
    
    if not db_admins:
        await message.answer("üë• –ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    await message.answer(
        "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=get_admin_list_keyboard(db_admins)
    )

@router.callback_query(F.data.startswith("delete_admin_"))
async def confirm_delete_admin(callback: CallbackQuery, db: BotDatabase):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–µ
    db_admins = await db.get_db_admins_with_description()
    admin_info = next((admin for admin in db_admins if admin[0] == user_id), None)
    
    if not admin_info:
        await callback.message.edit_text("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    description = admin_info[2] if admin_info[2] else f"ID: {user_id}"
    
    await callback.message.edit_text(
        f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞?\n\n"
        f"üë§ {description}",
        reply_markup=get_confirm_delete_keyboard(user_id)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_delete_"))
async def execute_delete_admin(callback: CallbackQuery, db: BotDatabase):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = int(callback.data.split("_")[2])
    
    success = await db.remove_admin(user_id)
    
    if success:
        await callback.message.edit_text("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    await callback.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.", reply_markup=get_admin_menu())
    await callback.answer()

@router.callback_query(F.data == "cancel_delete")
async def cancel_delete_admin(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.", reply_markup=get_admin_menu())
    await callback.answer()

@router.callback_query(F.data == "stop_parsing")
async def stop_parsing(callback: CallbackQuery, db: BotDatabase, scheduler=None):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    if scheduler:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –ø–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
        if not scheduler.parser_lock.is_running():
            await callback.message.edit_text("‚ÑπÔ∏è –ü–∞—Ä—Å–µ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            await callback.answer()
            return
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        success = scheduler.parser_lock.force_stop()
        
        if success:
            await callback.message.edit_text(
                "üõë <b>–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
                "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω\n"
                "üßπ –§–∞–π–ª—ã —Å–µ—Å—Å–∏–∏ –æ—á–∏—â–µ–Ω—ã\n"
                "üìù –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'stop'"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            try:
                admins = await db.get_all_admins()
                stop_message = f"""üõë <b>–ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>

üë§ –û—Å—Ç–∞–Ω–æ–≤–∏–ª: {callback.from_user.first_name or callback.from_user.id}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime("%d.%m.%Y %H:%M")}

‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –±—ã–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω"""
                
                for admin_id, _ in admins:
                    if admin_id != callback.from_user.id:  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–º—É, –∫—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª
                        try:
                            await scheduler.notification_service.send_message_to_user(admin_id, stop_message)
                        except Exception:
                            pass
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞."
            )
    else:
        await callback.message.edit_text("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    
    await callback.answer()

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def statistics(message: Message, db: BotDatabase, scheduler=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not await db.is_admin(message.from_user.id):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    schedule_time, schedule_day = await db.get_scheduler_settings()
    
    day_names = {
        "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
        "wednesday": "–°—Ä–µ–¥–∞",
        "thursday": "–ß–µ—Ç–≤–µ—Ä–≥", 
        "friday": "–ü—è—Ç–Ω–∏—Ü–∞",
        "saturday": "–°—É–±–±–æ—Ç–∞",
        "sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞
    parser_status = "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    if scheduler and scheduler.parser_lock.is_running():
        parser_status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç"
    
    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(await db.get_all_admins())}\n"
        f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {day_names.get(schedule_day, schedule_day)} –≤ {schedule_time}\n"
        f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞: {parser_status}"
    )

@router.callback_query(F.data == "custom_time", StateFilter(ScheduleStates.waiting_for_time))
async def custom_time_input(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ä—É—á–Ω—É—é"""
    await callback.message.edit_text(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM\n\n"
        "üï∞Ô∏è –ü—Ä–∏–º–µ—Ä—ã: 3:43, 19:45, 08:30\n\n"
        "‚ö†Ô∏è –í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏"
    )
    await state.set_state(ScheduleStates.waiting_for_custom_time)
    await callback.answer()

@router.message(StateFilter(ScheduleStates.waiting_for_custom_time))
async def process_custom_time(message: Message, state: FSMContext, db: BotDatabase, scheduler=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    time_text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    import re
    time_pattern = r'^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9])$'
    
    if not re.match(time_pattern, time_text):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n\n"
            "üï∞Ô∏è –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
            "‚Ä¢ 3:43\n"
            "‚Ä¢ 19:45\n"
            "‚Ä¢ 08:30\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É HH:MM
    parts = time_text.split(':')
    hour = int(parts[0])
    minute = int(parts[1])
    formatted_time = f"{hour:02d}:{minute:02d}"
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
    data = await state.get_data()
    selected_day = data.get("selected_day")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    success = await db.update_scheduler_settings(formatted_time, selected_day, message.from_user.id)
    
    day_names = {
        "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
        "wednesday": "–°—Ä–µ–¥–∞",
        "thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
        "friday": "–ü—è—Ç–Ω–∏—Ü–∞",
        "saturday": "–°—É–±–±–æ—Ç–∞",
        "sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    
    if success:
        await message.answer(
            f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!\n\n"
            f"üìÖ –î–µ–Ω—å: {day_names.get(selected_day, selected_day)}\n"
            f"üï∞Ô∏è –í—Ä–µ–º—è: {formatted_time}\n\n"
            f"üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è..."
        )
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        if scheduler:
            try:
                await scheduler.restart_scheduler()
                await message.answer(
                    f"‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!\n\n"
                    f"üéÜ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {day_names.get(selected_day, selected_day)} –≤ {formatted_time}",
                    reply_markup=get_main_menu()
                )
            except Exception as e:
                await message.answer(
                    f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.\n\n"
                    f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}\n\n"
                    f"–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
                    reply_markup=get_main_menu()
                )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu()
        )
    
    await state.clear()

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_command(message: Message, db: BotDatabase):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    if not await db.is_admin(message.from_user.id):
        return
    
    help_text = """
‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É

ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö.

üìã –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ üöÄ –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ - –∑–∞–ø—É—Å–∫ —Ä–∞–∑–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞

üïê –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:
–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00.
–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.

üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
–ö–æ–≥–¥–∞ –ø–∞—Ä—Å–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã, –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.

‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.
    """
    
    await message.answer(help_text)

@router.message(F.text == "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
async def analytics_menu(message: Message, db: BotDatabase):
    """–ú–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    if not await db.is_admin(message.from_user.id):
        return
    
    await message.answer(
        "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ª–∏—Å—Ç–∏–Ω–≥–æ–≤\n\n"
        "–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –≤–∞—à–∏—Ö –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏—Å—Ç–∏–Ω–≥–æ–≤.",
        reply_markup=get_analytics_menu()
    )

@router.message(F.text == "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É")
async def run_analytics(message: Message, db: BotDatabase):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    if not await db.is_admin(message.from_user.id):
        return
    
    await message.answer(
        "üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...\n\n"
        "‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç EverBee..."
    )
    
    import asyncio
    
    async def run_analytics_async():
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
        try:
            analytics_service = AnalyticsService()
            
            listing_ids = analytics_service.get_all_listing_ids()
            
            if not listing_ids:
                await message.answer(
                    "‚ö†Ô∏è –ù–µ—Ç –ª–∏—Å—Ç–∏–Ω–≥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.\n\n"
                    "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.",
                    reply_markup=get_analytics_menu()
                )
                return
            
            await message.answer(
                f"üìä –ù–∞–π–¥–µ–Ω–æ {len(listing_ids)} –ª–∏—Å—Ç–∏–Ω–≥–æ–≤\n"
                f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏..."
            )
            
            timestamp, current_stats = analytics_service.run_analytics()
            
            if not current_stats:
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç EverBee.\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=get_analytics_menu()
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø—ã –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            from services.tops_service import TopsService
            tops_service = TopsService()
            data = analytics_service._load_listings_data()
            potential_tops = tops_service._check_listings_age(data, timestamp)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ–ø–∞—Ö –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            if potential_tops:
                top_listings_data = tops_service._load_top_listings()
                admins = await db.get_all_admins()
                
                for listing_id in potential_tops:
                    if listing_id in top_listings_data.get("listings", {}):
                        summary = top_listings_data["listings"][listing_id]
                        top_message = tops_service.format_top_hit_message(summary)
                        
                        for admin_id, _ in admins:
                            try:
                                from bot.notifications import NotificationService
                                notification_service = NotificationService(message.bot, db)
                                await notification_service.send_message_to_user(admin_id, top_message)
                            except Exception as e:
                                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ–ø–µ {admin_id}: {e}")
            
            tops_msg = f"\nüî• –ù–∞–π–¥–µ–Ω–æ {len(potential_tops)} —Ç–æ–ø-—Ö–∏—Ç–æ–≤!" if potential_tops else ""
            
            await message.answer(
                f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
                f"üìÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞: {timestamp}\n"
                f"üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ª–∏—Å—Ç–∏–Ω–≥–æ–≤: {len(current_stats)}{tops_msg}\n\n"
                f"üîÑ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö..."
            )
            
            report = analytics_service.generate_changes_report()
            
            if not report:
                await message.answer(
                    "‚ÑπÔ∏è –≠—Ç–æ –ø–µ—Ä–≤—ã–π —Å–Ω–∏–º–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π.\n\n"
                    "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ–∑–∂–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.",
                    reply_markup=get_analytics_menu()
                )
                return
            
            formatted_message = analytics_service.format_changes_message(report)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            from bot.notifications import NotificationService
            notification_service = NotificationService(message.bot, db)
            await notification_service.send_long_message(message.from_user.id, formatted_message, "HTML")
            
            await message.answer(
                "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!",
                reply_markup=get_analytics_menu()
            )
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {e}", exc_info=True)
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:\n\n"
                f"üö® {str(e)[:200]}",
                reply_markup=get_analytics_menu()
            )
    
    asyncio.create_task(run_analytics_async())

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
async def analytics_settings(message: Message, db: BotDatabase):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    if not await db.is_admin(message.from_user.id):
        return
    
    await message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:",
        reply_markup=get_analytics_settings_menu()
    )

@router.message(F.text == "üïê –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
async def analytics_schedule_setup(message: Message, state: FSMContext, db: BotDatabase):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    if not await db.is_admin(message.from_user.id):
        return
    
    await message.answer(
        "üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:",
        reply_markup=get_days_keyboard()
    )
    await state.set_state(AnalyticsScheduleStates.waiting_for_day)

@router.callback_query(F.data.startswith("day_"), StateFilter(AnalyticsScheduleStates.waiting_for_day))
async def process_analytics_day_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    day = callback.data.split("_")[1]
    await state.update_data(selected_day=day)
    
    day_names = {
        "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫", 
        "wednesday": "–°—Ä–µ–¥–∞",
        "thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
        "friday": "–ü—è—Ç–Ω–∏—Ü–∞",
        "saturday": "–°—É–±–±–æ—Ç–∞",
        "sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    
    await callback.message.edit_text(
        f"üìÖ –í—ã–±—Ä–∞–Ω –¥–µ–Ω—å: {day_names.get(day, day)}\n\n"
        "üïê –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:",
        reply_markup=get_time_keyboard()
    )
    await state.set_state(AnalyticsScheduleStates.waiting_for_time)
    await callback.answer()

@router.callback_query(F.data.startswith("time_"), StateFilter(AnalyticsScheduleStates.waiting_for_time))
async def process_analytics_time_selection(callback: CallbackQuery, state: FSMContext, db: BotDatabase, analytics_scheduler=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    time = callback.data.split("_")[1]
    data = await state.get_data()
    selected_day = data.get("selected_day")
    
    success = await db.update_analytics_scheduler_settings(time, selected_day, callback.from_user.id)
    
    day_names = {
        "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
        "wednesday": "–°—Ä–µ–¥–∞", 
        "thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
        "friday": "–ü—è—Ç–Ω–∏—Ü–∞",
        "saturday": "–°—É–±–±–æ—Ç–∞",
        "sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    
    if success:
        await callback.message.edit_text(
            f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!\n\n"
            f"üìÖ –î–µ–Ω—å: {day_names.get(selected_day, selected_day)}\n"
            f"üïê –í—Ä–µ–º—è: {time}\n\n"
            f"üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è..."
        )
        
        if analytics_scheduler:
            try:
                logging.info(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–∑ callback. Scheduler: {analytics_scheduler}")
                await analytics_scheduler.restart_scheduler()
                await callback.message.edit_text(
                    f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!\n\n"
                    f"üìÖ –î–µ–Ω—å: {day_names.get(selected_day, selected_day)}\n"
                    f"üïê –í—Ä–µ–º—è: {time}\n\n"
                    f"‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω."
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}", exc_info=True)
                await callback.message.edit_text(
                    f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.\n\n"
                    f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}\n\n"
                    f"–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π."
                )
        else:
            logging.error("analytics_scheduler is None –≤ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ!")
            await callback.message.edit_text(
                f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
                f"‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π."
            )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
    
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "custom_time", StateFilter(AnalyticsScheduleStates.waiting_for_time))
async def analytics_custom_time_input(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ä—É—á–Ω—É—é –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    await callback.message.edit_text(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM\n\n"
        "üï∞Ô∏è –ü—Ä–∏–º–µ—Ä—ã: 3:43, 19:45, 08:30\n\n"
        "‚ö†Ô∏è –í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏"
    )
    await state.set_state(AnalyticsScheduleStates.waiting_for_custom_time)
    await callback.answer()

@router.message(StateFilter(AnalyticsScheduleStates.waiting_for_custom_time))
async def process_analytics_custom_time(message: Message, state: FSMContext, db: BotDatabase, analytics_scheduler=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    time_text = message.text.strip()
    
    import re
    time_pattern = r'^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9])$'
    
    if not re.match(time_pattern, time_text):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n\n"
            "üï∞Ô∏è –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
            "‚Ä¢ 3:43\n"
            "‚Ä¢ 19:45\n"
            "‚Ä¢ 08:30\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    parts = time_text.split(':')
    hour = int(parts[0])
    minute = int(parts[1])
    formatted_time = f"{hour:02d}:{minute:02d}"
    
    data = await state.get_data()
    selected_day = data.get("selected_day")
    
    success = await db.update_analytics_scheduler_settings(formatted_time, selected_day, message.from_user.id)
    
    day_names = {
        "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
        "wednesday": "–°—Ä–µ–¥–∞",
        "thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
        "friday": "–ü—è—Ç–Ω–∏—Ü–∞",
        "saturday": "–°—É–±–±–æ—Ç–∞",
        "sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    
    if success:
        await message.answer(
            f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!\n\n"
            f"üìÖ –î–µ–Ω—å: {day_names.get(selected_day, selected_day)}\n"
            f"üï∞Ô∏è –í—Ä–µ–º—è: {formatted_time}\n\n"
            f"üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è..."
        )
        
        if analytics_scheduler:
            try:
                logging.info(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞. Scheduler: {analytics_scheduler}")
                await analytics_scheduler.restart_scheduler()
                await message.answer(
                    f"‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!\n\n"
                    f"üéÜ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {day_names.get(selected_day, selected_day)} –≤ {formatted_time}",
                    reply_markup=get_analytics_menu()
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}", exc_info=True)
                await message.answer(
                    f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.\n\n"
                    f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}\n\n"
                    f"–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
                    reply_markup=get_analytics_menu()
                )
        else:
            logging.error("analytics_scheduler is None –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ!")
            await message.answer(
                f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
                f"‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
                reply_markup=get_analytics_menu()
            )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_analytics_menu()
        )
    
    await state.clear()

@router.message(F.text == "üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
async def current_analytics_settings(message: Message, db: BotDatabase):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    if not await db.is_admin(message.from_user.id):
        return
    
    schedule_time, schedule_day = await db.get_analytics_scheduler_settings()
    
    day_names = {
        "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
        "wednesday": "–°—Ä–µ–¥–∞",
        "thursday": "–ß–µ—Ç–≤–µ—Ä–≥", 
        "friday": "–ü—è—Ç–Ω–∏—Ü–∞",
        "saturday": "–°—É–±–±–æ—Ç–∞",
        "sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    
    await message.answer(
        f"üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:\n\n"
        f"üìÖ –î–µ–Ω—å: {day_names.get(schedule_day, schedule_day)}\n"
        f"üïê –í—Ä–µ–º—è: {schedule_time}\n\n"
        f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    )

@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main(message: Message, db: BotDatabase, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é"""
    if not await db.is_admin(message.from_user.id):
        return
    
    current_state = await state.get_state()
    
    if current_state and "Analytics" in current_state:
        await state.clear()
        await message.answer(
            "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ª–∏—Å—Ç–∏–Ω–≥–æ–≤\n\n"
            "–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –≤–∞—à–∏—Ö –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏—Å—Ç–∏–Ω–≥–æ–≤.",
            reply_markup=get_analytics_menu()
        )
    else:
        await state.clear()
        await message.answer(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_menu()
        )

@router.message()
async def unknown_message(message: Message, db: BotDatabase):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    await message.answer(
        "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=get_main_menu()
    )