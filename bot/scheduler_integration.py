"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å Telegram –±–æ—Ç–æ–º
"""
import asyncio
import logging
import schedule
import time
import pytz
from datetime import datetime
from threading import Thread
from typing import Optional

from bot.database import BotDatabase
from bot.notifications import NotificationService
from core.monitor import EtsyMonitor
from models.product import Product

class BotScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Telegram –±–æ—Ç–∞"""
    
    def __init__(self, notification_service: NotificationService, db: BotDatabase):
        self.notification_service = notification_service
        self.db = db
        self.monitor = EtsyMonitor()
        self.is_running = False
        self.scheduler_thread: Optional[Thread] = None
        self.moscow_tz = pytz.timezone('Europe/Moscow')
    
    async def scheduled_parsing_job(self, user_id: int = None):
        """–ó–∞–¥–∞—á–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        try:
            logging.info("–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
            await self.notification_service.send_parsing_started_notification(user_id)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            comparison_results = self.monitor.run_monitoring_cycle()
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
            all_new_products = []
            for result in comparison_results:
                if result.has_changes:
                    all_new_products.extend(result.new_products)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö (–≤—Å–µ–≥–¥–∞ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º)
            if all_new_products:
                await self.notification_service.send_multiple_products_notification(all_new_products)
                logging.info(f"–ù–∞–π–¥–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ {len(all_new_products)} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
            await self.notification_service.send_parsing_completed_notification(len(all_new_products), user_id)
            
            logging.info("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—à–∏–±–∫–µ
            try:
                error_message = f"""‚ùå <b>–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞</b>

üö® –û—à–∏–±–∫–∞: {str(e)[:200]}

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
                
                if user_id:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É
                    await self.notification_service.send_message_to_user(user_id, error_message)
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
                    admins = await self.db.get_all_admins()
                    for admin_id, _ in admins:
                        await self.notification_service.send_message_to_user(admin_id, error_message)
            except Exception:
                pass
    
    def _schedule_job_wrapper(self):
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
            loop.run_until_complete(self.scheduled_parsing_job())
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±–µ—Ä—Ç–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        finally:
            try:
                loop.close()
            except Exception:
                pass
    
    async def update_schedule(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            schedule.clear()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            schedule_time, schedule_day = await self.db.get_scheduler_settings()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            day_mapping = {
                "monday": schedule.every().monday,
                "tuesday": schedule.every().tuesday,
                "wednesday": schedule.every().wednesday,
                "thursday": schedule.every().thursday,
                "friday": schedule.every().friday,
                "saturday": schedule.every().saturday,
                "sunday": schedule.every().sunday
            }
            
            if schedule_day in day_mapping:
                day_mapping[schedule_day].at(schedule_time).do(self._schedule_job_wrapper)
                
                moscow_time = datetime.now(self.moscow_tz)
                logging.info(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {schedule_day} –≤ {schedule_time} –ú–°–ö")
                logging.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ú–°–ö: {moscow_time.strftime('%Y-%m-%d %H:%M:%S')}")
                
                if schedule.jobs:
                    logging.info(f"–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {schedule.next_run()}")
            else:
                logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {schedule_day}")
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
    
    def _scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logging.info("–ü–æ—Ç–æ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–ø—É—â–µ–Ω")
        
        while self.is_running:
            try:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                time.sleep(60)
        
        logging.info("–ü–æ—Ç–æ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.is_running:
            logging.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await self.update_schedule()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.is_running = True
            self.scheduler_thread = Thread(target=self._scheduler_loop, daemon=True)
            self.scheduler_thread.start()
            
            moscow_time = datetime.now(self.moscow_tz)
            logging.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –≤ {moscow_time.strftime('%Y-%m-%d %H:%M:%S')} –ú–°–ö")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ
            try:
                admins = await self.db.get_all_admins()
                schedule_time, schedule_day = await self.db.get_scheduler_settings()
                
                day_names = {
                    "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
                    "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
                    "wednesday": "–°—Ä–µ–¥–∞",
                    "thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
                    "friday": "–ü—è—Ç–Ω–∏—Ü–∞",
                    "saturday": "–°—É–±–±–æ—Ç–∞",
                    "sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
                }
                
                startup_message = f"""ü§ñ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω</b>

üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>
‚Ä¢ –î–µ–Ω—å: {day_names.get(schedule_day, schedule_day)}
‚Ä¢ –í—Ä–µ–º—è: {schedule_time}

‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω"""
                
                for admin_id, _ in admins:
                    await self.notification_service.send_message_to_user(admin_id, startup_message)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            self.is_running = False
    
    async def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if not self.is_running:
            logging.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        try:
            self.is_running = False
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
            if self.scheduler_thread and self.scheduler_thread.is_alive():
                self.scheduler_thread.join(timeout=5)
            
            # –û—á–∏—â–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            schedule.clear()
            
            logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            try:
                admins = await self.db.get_all_admins()
                moscow_time = datetime.now(self.moscow_tz)
                
                shutdown_message = f"""üõë <b>–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>

‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"""
                
                for admin_id, _ in admins:
                    await self.notification_service.send_message_to_user(admin_id, shutdown_message)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    async def restart_scheduler(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        logging.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
        await self.stop_scheduler()
        await asyncio.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        await self.start_scheduler()
    
    def is_scheduler_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        return self.is_running and (
            self.scheduler_thread is None or 
            self.scheduler_thread.is_alive()
        )