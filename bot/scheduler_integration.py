"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å Telegram –±–æ—Ç–æ–º
"""
import asyncio
import logging
import schedule
import time
import pytz
import os
from datetime import datetime, timezone
from threading import Thread
from typing import Optional

from bot.database import BotDatabase
from bot.notifications import NotificationService
from core.monitor import EtsyMonitor
from models.product import Product
import os

class ParserLock:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –ø–∞—Ä—Å–µ—Ä–∞ —á–µ—Ä–µ–∑ config-main.txt"""
    
    def __init__(self):
        self.config_file = "config-main.txt"
    
    def is_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø–∞—Ä—Å–µ—Ä —Å–æ–≥–ª–∞—Å–Ω–æ config-main.txt"""
        from config.settings import is_parser_working
        return is_parser_working()
    
    def set_working(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å 'start' –≤ config-main.txt"""
        self._update_config_value("is_working", "start")
    
    def set_stopped(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å 'stop' –≤ config-main.txt"""
        self._update_config_value("is_working", "stop")
    
    def get_status(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–∑ config-main.txt"""
        from config.settings import read_config_file
        config_data = read_config_file()
        return config_data.get('is_working', 'stop')
    
    def _update_config_value(self, key: str, value: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ config-main.txt (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)"""
        try:
            # –ß–∏—Ç–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            existing_data = {}
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if line and '=' in line and not line.startswith('#'):
                            k, v = line.split('=', 1)
                            existing_data[k.strip()] = v.strip()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–π –∫–ª—é—á
            existing_data[key] = value
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –æ–±—Ä–∞—Ç–Ω–æ
            with open(self.config_file, 'w', encoding='utf-8') as f:
                for k, v in existing_data.items():
                    f.write(f"{k}={v}\n")
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è config-main.txt: {e}")
    
    def force_stop(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä"""
        try:
            self.set_stopped()
            logging.info("–ü–∞—Ä—Å–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return False
    
    def reset_if_stuck(self, timeout_minutes: int = 30):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –µ—Å–ª–∏ –ø–∞—Ä—Å–µ—Ä –∑–∞–≤–∏—Å"""
        try:
            if not os.path.exists(self.config_file):
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            file_time = os.path.getmtime(self.config_file)
            current_time = time.time()
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –º–µ–Ω—è–ª—Å—è –±–æ–ª—å—à–µ timeout_minutes –∏ —Å—Ç–∞—Ç—É—Å 'start'
            if (current_time - file_time) > (timeout_minutes * 60) and self.is_running():
                self.set_stopped()
                logging.warning(f"–°–±—Ä–æ—à–µ–Ω–∞ –∑–∞–≤–∏—Å—à–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ (timeout: {timeout_minutes} –º–∏–Ω)")
                return True
            
            return False
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å—à–µ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            return False

class LoggingEtsyMonitor:
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è EtsyMonitor —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, monitor: EtsyMonitor, logger=None):
        self.monitor = monitor
        self.logger = logger
    
    def log_sync(self, message: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
        if self.logger:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            if not hasattr(self, 'pending_logs'):
                self.pending_logs = []
            
            self.pending_logs.append(message)
            logging.info(f"LOG: {message}")  # –î—É–±–ª–∏—Ä—É–µ–º –≤ –æ–±—ã—á–Ω—ã–µ –ª–æ–≥–∏
    
    async def flush_logs(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –ª–æ–≥–∏"""
        if self.logger and hasattr(self, 'pending_logs'):
            for log_message in self.pending_logs:
                try:
                    await self.logger.add_log_entry(log_message)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞: {e}")
            
            self.pending_logs.clear()
    
    def run_monitoring_cycle_with_logging(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –±–µ–∑ –¥–≤–æ–π–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ Google Sheets
            links = self.monitor.data_service.load_shop_urls()
            
            if not links:
                self.log_sync("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –∏–∑ Google Sheets")
                return []
            
            self.log_sync(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(links)} –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ Google Sheets")
            
            # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∞–Ω—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
            parsing_dir = self.monitor.data_service.start_parsing_session()
            
            # –ü–∞—Ä—Å–∏–º –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            all_shop_products = self.parse_all_shops_with_logging(links)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
            from config.settings import is_parser_working
            if not is_parser_working():
                self.log_sync("üõë –ü–∞—Ä—Å–∏–Ω–≥ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ")
                return []
            
            if not all_shop_products:
                self.log_sync("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –æ—Ç –æ–¥–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞")
                return []
            
            self.log_sync("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
            results_file = self.monitor.data_service.save_results_to_json(all_shop_products)
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            current_results = {}
            for shop_name, products in all_shop_products.items():
                current_results[shop_name] = {product.listing_id: product.url for product in products}
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
            new_products_dict = self.monitor.data_service.compare_all_shops_results(current_results)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ EverBee
            if new_products_dict:
                logging.info(f"\n=== –ê–ù–ê–õ–ò–ó –ù–û–í–´–• –¢–û–í–ê–†–û–í –ß–ï–†–ï–ó EVERBEE ===")
                logging.info(f"üì¶ –¢–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(new_products_dict)}")
                self.monitor.tops_service.process_new_products(
                    new_products_dict, 
                    self.monitor.data_service.current_parsing_folder
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            final_results_file = self.monitor.data_service.save_results_with_new_products(all_shop_products, new_products_dict)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –±–æ—Ç–∞
            comparison_results = []
            
            for shop_name, products in all_shop_products.items():
                # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
                new_products_for_shop = []
                for product in products:
                    if product.listing_id in new_products_dict:
                        new_products_for_shop.append(product)
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                from models.product import ShopComparison
                comparison = ShopComparison(
                    shop_name=shop_name,
                    new_products=new_products_for_shop,
                    removed_products=[],
                    total_current=len(products),
                    total_previous=len(products) - len(new_products_for_shop),
                    comparison_date=None
                )
                
                comparison_results.append(comparison)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–∏
            total_new = len(new_products_dict)
            if total_new > 0:
                self.log_sync(f"üéâ –ù–∞–π–¥–µ–Ω–æ {total_new} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤!")
            else:
                self.log_sync("üì≠ –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –û—á–∏—â–∞–µ–º –≤—Å—é output –ø–∞–ø–∫—É
            if self.monitor.data_service.cleanup_output_folder():
                self.log_sync("üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            return comparison_results
            
        except Exception as e:
            self.log_sync(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)[:100]}")
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
            return []
    
    def parse_all_shops_with_logging(self, urls):
        """–ü–∞—Ä—Å–∏—Ç –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã –≤ –æ–¥–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ –æ—á–µ—Ä–µ–¥–∏"""
        all_shop_products = {}
        
        for i, url in enumerate(urls, 1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
            from config.settings import is_parser_working
            if not is_parser_working():
                self.log_sync("üõë –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            
            try:
                shop_name = self.monitor.parser.get_shop_name_from_url(url)
                self.log_sync(f"üîÑ [{i}/{len(urls)}] –ü–∞—Ä—Å–∏–º: {shop_name}")
                
                # –ü–∞—Ä—Å–∏–º –º–∞–≥–∞–∑–∏–Ω (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É)
                products = self.monitor.parser.parse_shop_page(url)
                
                if products:
                    all_shop_products[shop_name] = products
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    filename = self.monitor.data_service.save_products_to_excel(products, shop_name)
                    
                    self.log_sync(f"‚úÖ {shop_name}: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)")
                else:
                    self.log_sync(f"‚ö†Ô∏è {shop_name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã")
                
            except Exception as e:
                shop_name = self.monitor.parser.get_shop_name_from_url(url) if url else "Unknown"
                self.log_sync(f"‚ùå –û—à–∏–±–∫–∞ –≤ {shop_name}: {str(e)[:50]}")
                logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {url}: {e}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø–æ—Å–ª–µ –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
        if hasattr(self.monitor.parser, 'close_browser'):
            self.monitor.parser.close_browser()
            self.log_sync("üîÑ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
        
        return all_shop_products



class BotScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Telegram –±–æ—Ç–∞"""
    
    def __init__(self, notification_service: NotificationService, db: BotDatabase):
        self.notification_service = notification_service
        self.db = db
        self.monitor = EtsyMonitor()
        self.is_running = False
        self.scheduler_thread: Optional[Thread] = None
        self.moscow_tz = pytz.timezone('Europe/Moscow')
        self.parser_lock = ParserLock()
        self.main_loop = None  # –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π event loop
    
    async def scheduled_parsing_job(self, user_id: int = None):
        """–ó–∞–¥–∞—á–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        logger = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–≤–∏—Å—à–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        self.parser_lock.reset_if_stuck()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–∞—Ä—Å–µ—Ä–∞
        if self.parser_lock.is_running():
            error_msg = "‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞."
            if user_id:
                await self.notification_service.send_message_to_user(user_id, error_msg)
            logging.warning("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        self.parser_lock.set_working()
        
        try:
            logging.info("–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å user_id, —Å–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            if user_id:
                from bot.notifications import ParsingLogger
                logger = ParsingLogger(self.notification_service, user_id)
                await logger.start_logging()
            else:
                # –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º
                await self.notification_service.send_parsing_started_notification(user_id)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            if logger:
                comparison_results = await self.run_monitoring_with_logging(logger)
            else:
                # –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä
                comparison_results = self.monitor.run_monitoring_cycle()
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
            all_new_products = []
            for result in comparison_results:
                if result.has_changes:
                    all_new_products.extend(result.new_products)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö (–≤—Å–µ–≥–¥–∞ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º)
            if all_new_products:
                await self.notification_service.send_multiple_products_notification(all_new_products)
                logging.info(f"–ù–∞–π–¥–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ {len(all_new_products)} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if logger:
                await logger.finish_logging(len(all_new_products))
            else:
                await self.notification_service.send_parsing_completed_notification(len(all_new_products), user_id)
            
            logging.info("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—à–∏–±–∫–µ
            try:
                error_message = f"""‚ùå <b>–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞</b>

üö® –û—à–∏–±–∫–∞: {str(e)[:200]}

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
                
                if logger:
                    await logger.add_log_entry(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}")
                elif user_id:
                    await self.notification_service.send_message_to_user(user_id, error_message)
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
                    admins = await self.db.get_all_admins()
                    for admin_id, _ in admins:
                        await self.notification_service.send_message_to_user(admin_id, error_message)
            except Exception:
                pass
        finally:
            # –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            self.parser_lock.set_stopped()
            logging.info("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ —Å–Ω—è—Ç–∞")
    
    async def run_monitoring_with_logging(self, logger=None):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            if logger:
                await logger.add_log_entry("üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π EtsyMonitor —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            comparison_results = await self.run_real_monitoring_with_logging(logger)
            
            return comparison_results
            
        except Exception as e:
            if logger:
                await logger.add_log_entry(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)[:100]}")
            raise e
    
    async def run_real_monitoring_with_logging(self, logger=None):
        """–ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            custom_monitor = LoggingEtsyMonitor(self.monitor, logger)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            import concurrent.futures
            
            with concurrent.futures.ThreadPoolExecutor() as executor:
                future = executor.submit(custom_monitor.run_monitoring_cycle_with_logging)
                comparison_results = future.result()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –ª–æ–≥–∏
            await custom_monitor.flush_logs()
            
            return comparison_results
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
            if logger:
                await logger.add_log_entry(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)[:100]}")
            return []
    
    def extract_shop_name(self, url: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ URL"""
        try:
            if 'etsy.com/shop/' in url:
                return url.split('/shop/')[1].split('/')[0].split('?')[0]
            else:
                return url.split('//')[1].split('/')[0][:20]
        except:
            return "Unknown Shop"
    

    
    def _schedule_job_wrapper(self):
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ"""
        try:
            if self.main_loop and not self.main_loop.is_closed():
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π event loop –±–æ—Ç–∞
                future = asyncio.run_coroutine_threadsafe(self.scheduled_parsing_job(), self.main_loop)
                future.result()  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            else:
                # –§–æ–ª–±—ç–∫: —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    loop.run_until_complete(self.scheduled_parsing_job())
                finally:
                    loop.close()
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±–µ—Ä—Ç–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    async def update_schedule(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å —É–º–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            schedule.clear()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            schedule_time, schedule_day = await self.db.get_scheduler_settings()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ú–°–ö
            moscow_time = datetime.now(self.moscow_tz)
            current_weekday = moscow_time.strftime('%A').lower()
            
            # –ú–∞–ø–ø–∏–Ω–≥ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
            day_mapping = {
                "monday": schedule.every().monday,
                "tuesday": schedule.every().tuesday,
                "wednesday": schedule.every().wednesday,
                "thursday": schedule.every().thursday,
                "friday": schedule.every().friday,
                "saturday": schedule.every().saturday,
                "sunday": schedule.every().sunday
            }
            
            if schedule_day in day_mapping:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —Ç–æ—Ç –∂–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                if current_weekday == schedule_day:
                    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ (—Å timezone)
                    schedule_hour, schedule_minute = map(int, schedule_time.split(':'))
                    schedule_datetime = moscow_time.replace(hour=schedule_hour, minute=schedule_minute, second=0, microsecond=0)
                    
                    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è - –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ–≥–æ–¥–Ω—è
                    if moscow_time < schedule_datetime:
                        # –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è
                        job = schedule.every().day.at(schedule_time).do(self._schedule_job_wrapper)
                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–±–µ–∑ timezone)
                        job.next_run = schedule_datetime.replace(tzinfo=None)
                        minutes_until = int((schedule_datetime - moscow_time).total_seconds() / 60)
                        logging.info(f"–£–º–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –∑–∞–ø—É—Å–∫ –°–ï–ì–û–î–ù–Ø –≤ {schedule_time} (—á–µ—Ä–µ–∑ {minutes_until} –º–∏–Ω)")
                    else:
                        # –í—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ - –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ
                        day_mapping[schedule_day].at(schedule_time).do(self._schedule_job_wrapper)
                        logging.info(f"–£–º–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ, –∑–∞–ø—É—Å–∫ –Ω–∞ –°–õ–ï–î–£–Æ–©–ï–ô –Ω–µ–¥–µ–ª–µ")
                else:
                    # –û–±—ã—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                    day_mapping[schedule_day].at(schedule_time).do(self._schedule_job_wrapper)
                    logging.info(f"–û–±—ã—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {schedule_day} –≤ {schedule_time}")
                
                logging.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ú–°–ö: {moscow_time.strftime('%Y-%m-%d %H:%M:%S')}")
                
                if schedule.jobs:
                    next_run = schedule.next_run()
                    logging.info(f"–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {next_run}")
            else:
                logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {schedule_day}")
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
    
    def _scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logging.info("–ü–æ—Ç–æ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–ø—É—â–µ–Ω")
        
        while self.is_running:
            try:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                time.sleep(60)
        
        logging.info("–ü–æ—Ç–æ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.is_running:
            logging.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–∞—Ä—Å–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            self.parser_lock.set_stopped()
            logging.info("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–∫—É—â–∏–π event loop
            self.main_loop = asyncio.get_event_loop()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await self.update_schedule()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.is_running = True
            self.scheduler_thread = Thread(target=self._scheduler_loop, daemon=True)
            self.scheduler_thread.start()
            
            moscow_time = datetime.now(self.moscow_tz)
            logging.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –≤ {moscow_time.strftime('%Y-%m-%d %H:%M:%S')} –ú–°–ö")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ
            try:
                admins = await self.db.get_all_admins()
                schedule_time, schedule_day = await self.db.get_scheduler_settings()
                
                day_names = {
                    "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
                    "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
                    "wednesday": "–°—Ä–µ–¥–∞",
                    "thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
                    "friday": "–ü—è—Ç–Ω–∏—Ü–∞",
                    "saturday": "–°—É–±–±–æ—Ç–∞",
                    "sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
                }
                
                startup_message = f"""ü§ñ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω</b>

üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>
‚Ä¢ –î–µ–Ω—å: {day_names.get(schedule_day, schedule_day)}
‚Ä¢ –í—Ä–µ–º—è: {schedule_time}

‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω"""
                
                for admin_id, _ in admins:
                    if self.main_loop and not self.main_loop.is_closed():
                        asyncio.run_coroutine_threadsafe(
                            self.notification_service.send_message_to_user(admin_id, startup_message),
                            self.main_loop
                        )
                    else:
                        await self.notification_service.send_message_to_user(admin_id, startup_message)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            self.is_running = False
    
    async def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if not self.is_running:
            logging.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        try:
            self.is_running = False
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
            if self.scheduler_thread and self.scheduler_thread.is_alive():
                self.scheduler_thread.join(timeout=5)
            
            # –û—á–∏—â–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            schedule.clear()
            
            logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            try:
                admins = await self.db.get_all_admins()
                moscow_time = datetime.now(self.moscow_tz)
                
                shutdown_message = f"""üõë <b>–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>

‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"""
                
                for admin_id, _ in admins:
                    if self.main_loop and not self.main_loop.is_closed():
                        asyncio.run_coroutine_threadsafe(
                            self.notification_service.send_message_to_user(admin_id, shutdown_message),
                            self.main_loop
                        )
                    else:
                        await self.notification_service.send_message_to_user(admin_id, shutdown_message)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    async def restart_scheduler(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        logging.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
        await self.stop_scheduler()
        await asyncio.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        await self.start_scheduler()
    
    def is_scheduler_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        return self.is_running and (
            self.scheduler_thread is None or 
            self.scheduler_thread.is_alive()
        )