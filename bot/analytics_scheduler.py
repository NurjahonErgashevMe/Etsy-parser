"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Telegram –±–æ—Ç–∞
"""
import asyncio
import logging
import schedule
import time
import pytz
from datetime import datetime
from threading import Thread
from typing import Optional

from bot.database import BotDatabase
from bot.notifications import NotificationService
from services.analytics_service import AnalyticsService


class AnalyticsScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Telegram –±–æ—Ç–∞"""
    
    def __init__(self, notification_service: NotificationService, db: BotDatabase):
        self.notification_service = notification_service
        self.db = db
        self.analytics_service = AnalyticsService()
        self.is_running = False
        self.scheduler_thread: Optional[Thread] = None
        self.moscow_tz = pytz.timezone('Europe/Moscow')
        self.main_loop = None
    
    async def scheduled_analytics_job(self, user_id: int = None):
        """–ó–∞–¥–∞—á–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        try:
            logging.info("–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏")
            
            if user_id:
                await self.notification_service.send_message_to_user(
                    user_id,
                    "üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...\n\n‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç EverBee..."
                )
            
            listing_ids = self.analytics_service.get_all_listing_ids()
            
            if not listing_ids:
                msg = "‚ö†Ô∏è –ù–µ—Ç –ª–∏—Å—Ç–∏–Ω–≥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.\n\n–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤."
                if user_id:
                    await self.notification_service.send_message_to_user(user_id, msg)
                else:
                    admins = await self.db.get_all_admins()
                    for admin_id, _ in admins:
                        await self.notification_service.send_message_to_user(admin_id, msg)
                return
            
            if user_id:
                await self.notification_service.send_message_to_user(
                    user_id,
                    f"üìä –ù–∞–π–¥–µ–Ω–æ {len(listing_ids)} –ª–∏—Å—Ç–∏–Ω–≥–æ–≤\nüîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏..."
                )
            
            timestamp, current_stats = self.analytics_service.run_analytics()
            
            if not current_stats:
                msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç EverBee.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                if user_id:
                    await self.notification_service.send_message_to_user(user_id, msg)
                else:
                    admins = await self.db.get_all_admins()
                    for admin_id, _ in admins:
                        await self.notification_service.send_message_to_user(admin_id, msg)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø—ã
            from services.tops_service import TopsService
            tops_service = TopsService()
            data = self.analytics_service._load_listings_data()
            potential_tops = tops_service._check_listings_age(data, timestamp)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ–ø–∞—Ö
            if potential_tops:
                top_listings_data = tops_service._load_top_listings()
                admins = await self.db.get_all_admins()
                
                for listing_id in potential_tops:
                    if listing_id in top_listings_data.get("listings", {}):
                        summary = top_listings_data["listings"][listing_id]
                        top_message = tops_service.format_top_hit_message(summary)
                        
                        for admin_id, _ in admins:
                            try:
                                await self.notification_service.send_message_to_user(admin_id, top_message)
                            except Exception as e:
                                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ–ø–µ {admin_id}: {e}")
            
            tops_msg = f"\nüî• –ù–∞–π–¥–µ–Ω–æ {len(potential_tops)} —Ç–æ–ø-—Ö–∏—Ç–æ–≤!" if potential_tops else ""
            
            if user_id:
                await self.notification_service.send_message_to_user(
                    user_id,
                    f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
                    f"üìÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞: {timestamp}\n"
                    f"üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ª–∏—Å—Ç–∏–Ω–≥–æ–≤: {len(current_stats)}{tops_msg}\n\n"
                    f"üîÑ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö..."
                )
            
            report = self.analytics_service.generate_changes_report()
            
            if not report:
                msg = "‚ÑπÔ∏è –≠—Ç–æ –ø–µ—Ä–≤—ã–π —Å–Ω–∏–º–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π."
                if user_id:
                    await self.notification_service.send_message_to_user(user_id, msg)
                return
            
            formatted_message = self.analytics_service.format_changes_message(report)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            admins = await self.db.get_all_admins()
            for admin_id, _ in admins:
                try:
                    await self.notification_service.send_long_message(admin_id, formatted_message, "HTML")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            
            logging.info("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {e}")
            error_message = f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏</b>\n\nüö® –û—à–∏–±–∫–∞: {str(e)[:200]}"
            
            try:
                if user_id:
                    await self.notification_service.send_message_to_user(user_id, error_message)
                else:
                    admins = await self.db.get_all_admins()
                    for admin_id, _ in admins:
                        await self.notification_service.send_message_to_user(admin_id, error_message)
            except Exception:
                pass
    
    def _schedule_job_wrapper(self):
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ"""
        try:
            if self.main_loop and not self.main_loop.is_closed():
                future = asyncio.run_coroutine_threadsafe(self.scheduled_analytics_job(), self.main_loop)
                future.result()
            else:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    loop.run_until_complete(self.scheduled_analytics_job())
                finally:
                    loop.close()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±–µ—Ä—Ç–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
    
    async def update_schedule(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å —É–º–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            schedule.clear('analytics')
            schedule.clear('analytics_today')
            
            schedule_time, schedule_day = await self.db.get_analytics_scheduler_settings()
            logging.info(f"[–ê–ù–ê–õ–ò–¢–ò–ö–ê] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î: {schedule_day} –≤ {schedule_time}")
            
            moscow_time = datetime.now(self.moscow_tz)
            current_weekday = moscow_time.strftime('%A').lower()
            logging.info(f"[–ê–ù–ê–õ–ò–¢–ò–ö–ê] –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ú–°–ö: {moscow_time.strftime('%Y-%m-%d %H:%M:%S')} ({current_weekday})")
            
            day_mapping = {
                "monday": schedule.every().monday,
                "tuesday": schedule.every().tuesday,
                "wednesday": schedule.every().wednesday,
                "thursday": schedule.every().thursday,
                "friday": schedule.every().friday,
                "saturday": schedule.every().saturday,
                "sunday": schedule.every().sunday
            }
            
            if schedule_day in day_mapping:
                day_mapping[schedule_day].at(schedule_time).do(self._schedule_job_wrapper).tag('analytics')
                logging.info(f"[–ê–ù–ê–õ–ò–¢–ò–ö–ê] –°–æ–∑–¥–∞–Ω–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞: {schedule_day} –≤ {schedule_time}")
                
                if current_weekday == schedule_day:
                    schedule_hour, schedule_minute = map(int, schedule_time.split(':'))
                    schedule_datetime = moscow_time.replace(hour=schedule_hour, minute=schedule_minute, second=0, microsecond=0)
                    
                    if moscow_time < schedule_datetime:
                        minutes_until = int((schedule_datetime - moscow_time).total_seconds() / 60)
                        
                        local_time = datetime.now()
                        time_diff = schedule_datetime - moscow_time
                        local_schedule_time = local_time + time_diff
                        local_time_str = local_schedule_time.strftime('%H:%M')
                        
                        schedule.every().day.at(local_time_str).do(self._schedule_job_wrapper).tag('analytics_today')
                        
                        logging.info(f"[–ê–ù–ê–õ–ò–¢–ò–ö–ê] –ó–∞–ø—É—Å–∫ –°–ï–ì–û–î–ù–Ø –≤ {schedule_time} –ú–°–ö (—á–µ—Ä–µ–∑ {minutes_until} –º–∏–Ω) + –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ")
                    else:
                        logging.info(f"[–ê–ù–ê–õ–ò–¢–ò–ö–ê] –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: –∫–∞–∂–¥—ã–π {schedule_day} –≤ {schedule_time} –ú–°–ö")
                else:
                    logging.info(f"[–ê–ù–ê–õ–ò–¢–ò–ö–ê] –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: –∫–∞–∂–¥—ã–π {schedule_day} –≤ {schedule_time} –ú–°–ö")
                
                analytics_jobs = [job for job in schedule.jobs if 'analytics' in job.tags]
                logging.info(f"[–ê–ù–ê–õ–ò–¢–ò–ö–ê] –í—Å–µ–≥–æ –∑–∞–¥–∞—á –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ schedule: {len(analytics_jobs)}")
                if analytics_jobs:
                    for job in analytics_jobs:
                        logging.info(f"[–ê–ù–ê–õ–ò–¢–ò–ö–ê] –ó–∞–¥–∞—á–∞: {job.tags}, —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {job.next_run}")
            else:
                logging.error(f"[–ê–ù–ê–õ–ò–¢–ò–ö–ê] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {schedule_day}")
                
        except Exception as e:
            logging.error(f"[–ê–ù–ê–õ–ò–¢–ò–ö–ê] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}", exc_info=True)
    
    def _scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logging.info("[–ê–ù–ê–õ–ò–¢–ò–ö–ê] –ü–æ—Ç–æ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–ø—É—â–µ–Ω")
        
        while self.is_running:
            try:
                schedule.run_pending()
                time.sleep(60)
            except Exception as e:
                logging.error(f"[–ê–ù–ê–õ–ò–¢–ò–ö–ê] –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                time.sleep(60)
        
        logging.info("[–ê–ù–ê–õ–ò–¢–ò–ö–ê] –ü–æ—Ç–æ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.is_running:
            logging.warning("[–ê–ù–ê–õ–ò–¢–ò–ö–ê] –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        try:
            logging.info("[–ê–ù–ê–õ–ò–¢–ò–ö–ê] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
            self.main_loop = asyncio.get_event_loop()
            await self.update_schedule()
            
            self.is_running = True
            self.scheduler_thread = Thread(target=self._scheduler_loop, daemon=True)
            self.scheduler_thread.start()
            
            moscow_time = datetime.now(self.moscow_tz)
            logging.info(f"[–ê–ù–ê–õ–ò–¢–ò–ö–ê] –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –≤ {moscow_time.strftime('%Y-%m-%d %H:%M:%S')} –ú–°–ö")
            logging.info(f"[–ê–ù–ê–õ–ò–¢–ò–ö–ê] –ü–æ—Ç–æ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {self.scheduler_thread.is_alive()}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ
            try:
                admins = await self.db.get_all_admins()
                schedule_time, schedule_day = await self.db.get_analytics_scheduler_settings()
                
                day_names = {
                    "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
                    "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
                    "wednesday": "–°—Ä–µ–¥–∞",
                    "thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
                    "friday": "–ü—è—Ç–Ω–∏—Ü–∞",
                    "saturday": "–°—É–±–±–æ—Ç–∞",
                    "sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
                }
                
                startup_message = f"""üìà <b>–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞–ø—É—â–µ–Ω</b>

üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>
‚Ä¢ –î–µ–Ω—å: {day_names.get(schedule_day, schedule_day)}
‚Ä¢ –í—Ä–µ–º—è: {schedule_time}

‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω"""
                
                for admin_id, _ in admins:
                    if self.main_loop and not self.main_loop.is_closed():
                        asyncio.run_coroutine_threadsafe(
                            self.notification_service.send_message_to_user(admin_id, startup_message),
                            self.main_loop
                        )
                    else:
                        await self.notification_service.send_message_to_user(admin_id, startup_message)
            except Exception as e:
                logging.error(f"[–ê–ù–ê–õ–ò–¢–ò–ö–ê] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}")
            
        except Exception as e:
            logging.error(f"[–ê–ù–ê–õ–ò–¢–ò–ö–ê] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}", exc_info=True)
            self.is_running = False
    
    async def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if not self.is_running:
            logging.warning("[–ê–ù–ê–õ–ò–¢–ò–ö–ê] –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        try:
            self.is_running = False
            
            if self.scheduler_thread and self.scheduler_thread.is_alive():
                self.scheduler_thread.join(timeout=5)
            
            schedule.clear('analytics')
            schedule.clear('analytics_today')
            
            logging.info("[–ê–ù–ê–õ–ò–¢–ò–ö–ê] –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            try:
                admins = await self.db.get_all_admins()
                
                shutdown_message = f"""üõë <b>–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>

‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"""
                
                for admin_id, _ in admins:
                    if self.main_loop and not self.main_loop.is_closed():
                        asyncio.run_coroutine_threadsafe(
                            self.notification_service.send_message_to_user(admin_id, shutdown_message),
                            self.main_loop
                        )
                    else:
                        await self.notification_service.send_message_to_user(admin_id, shutdown_message)
            except Exception as e:
                logging.error(f"[–ê–ù–ê–õ–ò–¢–ò–ö–ê] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
                
        except Exception as e:
            logging.error(f"[–ê–ù–ê–õ–ò–¢–ò–ö–ê] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    async def restart_scheduler(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        logging.info("[–ê–ù–ê–õ–ò–¢–ò–ö–ê] –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
        await self.stop_scheduler()
        await asyncio.sleep(2)
        await self.start_scheduler()
        logging.info("[–ê–ù–ê–õ–ò–¢–ò–ö–ê] –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    def is_scheduler_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        return self.is_running and (
            self.scheduler_thread is None or 
            self.scheduler_thread.is_alive()
        )
