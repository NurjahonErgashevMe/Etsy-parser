"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
"""
import os
import pandas as pd
import glob
import json
import shutil
import random
import string
import logging
from datetime import datetime
from typing import List, Optional, Tuple, Dict
from models.product import Product, ShopComparison

class DataService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, config):
        self.config = config
        self.output_dir = config.output_dir
        self.current_parsing_folder = None  # –ü–∞–ø–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∞–Ω—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
        self.current_parsing_dir = None     # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∞–Ω—Å–∞
        os.makedirs(self.output_dir, exist_ok=True)
    
    def start_parsing_session(self) -> str:
        """–°–æ–∑–¥–∞—ë—Ç –ø–∞–ø–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∞–Ω—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë –ø—É—Ç—å"""
        self.current_parsing_folder = datetime.now().strftime("%d.%m.%Y_%H.%M")
        self.current_parsing_dir = os.path.join(self.output_dir, self.current_parsing_folder)
        os.makedirs(self.current_parsing_dir, exist_ok=True)
        
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Å–µ–∞–Ω—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {self.current_parsing_folder}")
        return self.current_parsing_dir
    
    def save_products_to_excel(self, products: List[Product], shop_name: str) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –≤ Excel —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∞–Ω—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        if not products:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return None
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∞–Ω—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
        if not self.current_parsing_dir:
            self.start_parsing_session()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        filename = os.path.join(self.current_parsing_dir, f"{shop_name}.xlsx")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ DataFrame
        data = [product.to_dict() for product in products]
        df = pd.DataFrame(data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        df.to_excel(filename, index=False)
        
        print(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        return filename
    
    def load_products_from_excel(self, filename: str) -> List[Product]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ Excel —Ñ–∞–π–ª–∞"""
        try:
            df = pd.read_excel(filename)
            products = []
            
            for _, row in df.iterrows():
                product = Product.from_dict(row.to_dict())
                products.append(product)
            
            return products
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {filename}: {e}")
            return []
    
    def get_latest_file_for_shop(self, shop_name: str) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ñ–∞–π–ª—É –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        # –ò—â–µ–º —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–∞—Ö —Å –¥–∞—Ç–∞–º–∏
        pattern = f"{self.output_dir}/*/{shop_name}.xlsx"
        files = glob.glob(pattern)
        
        if not files:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            old_pattern = f"{self.output_dir}/{shop_name}_*.xlsx"
            files = glob.glob(old_pattern)
        
        if not files:
            return None
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        files.sort(key=os.path.getctime, reverse=True)
        return files[0]
    
    def get_previous_file_for_shop(self, shop_name: str) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ñ–∞–π–ª—É –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞"""
        # –ò—â–µ–º —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–∞—Ö —Å –¥–∞—Ç–∞–º–∏
        pattern = f"{self.output_dir}/*/{shop_name}.xlsx"
        files = glob.glob(pattern)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        old_pattern = f"{self.output_dir}/{shop_name}_*.xlsx"
        old_files = glob.glob(old_pattern)
        files.extend(old_files)
        
        if len(files) < 2:
            return None
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        files.sort(key=os.path.getctime, reverse=True)
        return files[1]
    
    def get_all_files_for_shop(self, shop_name: str) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ"""
        # –ò—â–µ–º —Ñ–∞–π–ª—ã –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        pattern = f"{self.output_dir}/*/{shop_name}.xlsx"
        files = glob.glob(pattern)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        old_pattern = f"{self.output_dir}/{shop_name}_*.xlsx"
        old_files = glob.glob(old_pattern)
        files.extend(old_files)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        files.sort(key=os.path.getctime, reverse=True)
        return files
    
    def compare_shop_data(self, current_products: List[Product], shop_name: str) -> Optional[ShopComparison]:
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏"""
        previous_file = self.get_previous_file_for_shop(shop_name)
        
        if not previous_file:
            print(f"–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ {shop_name}")
            return None
        
        previous_products = self.load_products_from_excel(previous_file)
        
        if not previous_products:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {shop_name}")
            return None
        
        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ ID –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        current_ids = {p.listing_id for p in current_products}
        previous_ids = {p.listing_id for p in previous_products}
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –∏ —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        new_ids = current_ids - previous_ids
        removed_ids = previous_ids - current_ids
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        new_products = [p for p in current_products if p.listing_id in new_ids]
        removed_products = [p for p in previous_products if p.listing_id in removed_ids]
        
        comparison = ShopComparison(
            shop_name=shop_name,
            new_products=new_products,
            removed_products=removed_products,
            total_current=len(current_products),
            total_previous=len(previous_products),
            comparison_date=datetime.now()
        )
        
        return comparison
    
    def print_comparison_results(self, comparison: ShopComparison):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å"""
        print(f"\n=== –°–†–ê–í–ù–ï–ù–ò–ï –î–õ–Ø {comparison.shop_name} ===")
        print(f"–¢–µ–∫—É—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤: {comparison.total_current}")
        print(f"–ü—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤: {comparison.total_previous}")
        print(f"–ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(comparison.new_products)}")
        print(f"–£–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(comparison.removed_products)}")
        
        if comparison.new_products:
            print("\n–ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã:")
            for product in comparison.new_products:
                print(f"  - {product.title} (ID: {product.listing_id})")
        
        if comparison.removed_products:
            print("\n–£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:")
            for product in comparison.removed_products:
                print(f"  - {product.title} (ID: {product.listing_id})")
        
        if not comparison.has_changes:
            print("–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    def save_results_to_json(self, all_shop_products: Dict[str, List[Product]]) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ results.json –≤ –ø–∞–ø–∫—É —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∞–Ω—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∞–Ω—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
        if not self.current_parsing_dir:
            self.start_parsing_session()
        
        results_file = os.path.join(self.current_parsing_dir, "results.json")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö: {shops: {"shop_name": {"listing-id": "url", ...}, ...}}
        shops_data = {}
        for shop_name, products in all_shop_products.items():
            shops_data[shop_name] = {product.listing_id: product.url for product in products}
        
        results = {"shops": shops_data}
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {results_file}")
        return results_file
    
    def load_results_from_json(self, results_file: str) -> Optional[Dict[str, Dict[str, str]]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ results.json"""
        try:
            with open(results_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return data.get("shops", {})
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {results_file}: {e}")
            return None
    
    def get_previous_results_file(self) -> Optional[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª results.json (–¢–û–õ–¨–ö–û —Å results.json!)"""
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑ –ø–æ–∏—Å–∫–∞
        current_folder_name = self.current_parsing_folder if self.current_parsing_folder else datetime.now().strftime("%d.%m.%Y_%H.%M")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞–ø–∫–∏ —Å results.json (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!)
        date_folders = []
        for item in os.listdir(self.output_dir):
            item_path = os.path.join(self.output_dir, item)
            if os.path.isdir(item_path) and item != current_folder_name:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –ø–∞–ø–∫–µ results.json (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!)
                results_file = os.path.join(item_path, "results.json")
                if os.path.exists(results_file):
                    try:
                        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏
                        if "_" in item:
                            folder_datetime = datetime.strptime(item, "%d.%m.%Y_%H.%M")
                        else:
                            folder_datetime = datetime.strptime(item, "%d.%m.%Y")
                        date_folders.append((folder_datetime, results_file))
                        logging.info(f"–ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ —Å results.json: {item}")
                    except ValueError:
                        continue
        
        if not date_folders:
            logging.info("–ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å results.json –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return None
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –±–µ—Ä–µ–º —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π
        date_folders.sort(key=lambda x: x[0], reverse=True)
        latest_file = date_folders[0][1]
        
        logging.info(f"–ù–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π results.json: {latest_file}")
        return latest_file
    
    def compare_all_shops_results(self, current_results: Dict[str, Dict[str, str]]) -> Dict[str, str]:
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –∏ –Ω–∞—Ö–æ–¥–∏—Ç –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã"""
        previous_results_file = self.get_previous_results_file()
        
        if not previous_results_file:
            print("–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
            return {}
        
        previous_results = self.load_results_from_json(previous_results_file)
        
        if not previous_results:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            return {}
        
        new_products = {}
        
        print(f"–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –º–∞–≥–∞–∑–∏–Ω—ã:")
        print(f"  –¢–µ–∫—É—â–∏–µ –º–∞–≥–∞–∑–∏–Ω—ã: {list(current_results.keys())}")
        print(f"  –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞–≥–∞–∑–∏–Ω—ã: {list(previous_results.keys())}")
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –º–∞–≥–∞–∑–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        for shop_name in current_results:
            if shop_name in previous_results:
                current_listings = set(current_results[shop_name].keys())
                previous_listings = set(previous_results[shop_name].keys())
                
                print(f"  –ú–∞–≥–∞–∑–∏–Ω {shop_name}:")
                print(f"    –¢–µ–∫—É—â–∏–µ —Ç–æ–≤–∞—Ä—ã: {len(current_listings)}")
                print(f"    –ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–æ–≤–∞—Ä—ã: {len(previous_listings)}")
                
                # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ listing-id
                new_listing_ids = current_listings - previous_listings
                
                if new_listing_ids:
                    print(f"    –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã: {list(new_listing_ids)}")
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    for listing_id in new_listing_ids:
                        new_products[listing_id] = current_results[shop_name][listing_id]
                    print(f"–ú–∞–≥–∞–∑–∏–Ω {shop_name}: –Ω–∞–π–¥–µ–Ω–æ {len(new_listing_ids)} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
                else:
                    print(f"    –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            else:
                print(f"–ú–∞–≥–∞–∑–∏–Ω {shop_name}: –Ω–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ")
        
        print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(new_products)}")
        if new_products:
            print("–°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:")
            for listing_id, url in new_products.items():
                print(f"  - {listing_id}: {url}")
        
        return new_products
    
    # def generate_mock_products(self) -> Dict[str, str]:
    #     """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ MockShop"""

    #     # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –Ω–∞–±–æ—Ä –º–æ–∫–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    #     static_mock_products = {
    #         "1234567890": "https://www.etsy.com/listing/1234567890/handmade-ceramic-mug",
    #         "2345678901": "https://www.etsy.com/listing/2345678901/vintage-leather-wallet",
    #         "3456789012": "https://www.etsy.com/listing/3456789012/wooden-cutting-board",
    #         "4567890123": "https://www.etsy.com/listing/4567890123/silver-pendant-necklace",
    #         "5678901234": "https://www.etsy.com/listing/5678901234/cotton-tote-bag",
    #         "6789012345": "https://www.etsy.com/listing/6789012345/scented-soy-candle"
    #     }
        
    #     # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç 3 –¥–æ 6
    #     num_products = random.randint(3, 6)
        
    #     # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–±–æ—Ä–∞
    #     selected_items = random.sample(list(static_mock_products.items()), num_products)
    #     mock_products = dict(selected_items)
        
    #     print(f"–í—ã–±—Ä–∞–Ω–æ {num_products} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ MockShop")
    #     return mock_products
    
    # def add_mock_shop_to_results(self, all_shop_products: Dict[str, List[Product]]) -> Dict[str, List[Product]]:
    #     """–î–æ–±–∞–≤–ª—è–µ—Ç –º–æ–∫–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω MockShop –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –î–û —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    #     # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
    #     mock_products_data = self.generate_mock_products()
        
    #     # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ Product –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è MockShop
    #     mock_products = []
    #     for listing_id, url in mock_products_data.items():
    #         product = Product(
    #             listing_id=listing_id,
    #             title=f"Mock Product {listing_id}",
    #             url=url,
    #             shop_name="MockShop",
    #             price="25.00",
    #             currency="USD"
    #         )
    #         mock_products.append(product)
        
    #     # –î–æ–±–∞–≤–ª—è–µ–º MockShop –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    #     all_shop_products["MockShop"] = mock_products
    #     print(f"–î–æ–±–∞–≤–ª–µ–Ω –º–æ–∫–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω MockShop —Å {len(mock_products)} —Ç–æ–≤–∞—Ä–∞–º–∏")
        
    #     return all_shop_products
    
    def save_results_with_new_products(self, all_shop_products: Dict[str, List[Product]], new_products: Dict[str, str]) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö –≤ –ø–∞–ø–∫—É —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∞–Ω—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∞–Ω—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
        if not self.current_parsing_dir:
            self.start_parsing_session()
        
        results_file = os.path.join(self.current_parsing_dir, "results.json")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        shops_data = {}
        for shop_name, products in all_shop_products.items():
            shops_data[shop_name] = {product.listing_id: product.url for product in products}
        
        results = {
            "shops": shops_data,
            "new_products": new_products
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –Ω–æ–≤—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {results_file}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ Google Sheets
        self.save_new_products_to_sheets(new_products)
        
        return results_file
    
    def save_new_products_to_sheets(self, new_products: Dict[str, str]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ Google Sheets"""
        if not new_products:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets
        if hasattr(self.config, 'google_sheets_enabled') and self.config.google_sheets_enabled:
            try:
                from services.google_sheets_service import GoogleSheetsService
                sheets_service = GoogleSheetsService(self.config)
                
                if sheets_service.enabled:
                    sheets_service.add_new_products_to_sheets(
                        self.config.google_sheets_spreadsheet_id,
                        new_products,
                        "Etsy Products"
                    )
                else:
                    print("‚ö†Ô∏è Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ Google Sheets: {e}")
        else:
            print("üìä Google Sheets –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    def cleanup_output_folder(self) -> bool:
        """–û—á–∏—â–∞–µ—Ç –≤—Å—é output –ø–∞–ø–∫—É, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        if not self.current_parsing_folder:
            logging.info("–ù–µ—Ç —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
            return True
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞–ø–∫–∏ –≤ output
            folders_to_delete = []
            for item in os.listdir(self.output_dir):
                item_path = os.path.join(self.output_dir, item)
                if os.path.isdir(item_path) and item != self.current_parsing_folder:
                    folders_to_delete.append(item_path)
            
            if not folders_to_delete:
                logging.info("–ù–µ—Ç –ø–∞–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return True
            
            logging.info(f"–û—á–∏—â–∞–µ–º output –ø–∞–ø–∫—É: —É–¥–∞–ª—è–µ–º {len(folders_to_delete)} –ø–∞–ø–æ–∫")
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–∞–ø–∫–∏ –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–π
            deleted_count = 0
            for folder_path in folders_to_delete:
                try:
                    shutil.rmtree(folder_path, ignore_errors=True)
                    if not os.path.exists(folder_path):
                        deleted_count += 1
                        logging.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {os.path.basename(folder_path)}")
                    else:
                        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: {os.path.basename(folder_path)}")
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {folder_path}: {e}")
            
            logging.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {deleted_count}/{len(folders_to_delete)} –ø–∞–ø–æ–∫")
            logging.info(f"–û—Å—Ç–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: {self.current_parsing_folder}")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ output –ø–∞–ø–∫–∏: {e}")
            return False
    
    def load_shop_urls(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ URL –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏–∑ Google Sheets"""
        if hasattr(self.config, 'google_sheets_enabled') and self.config.google_sheets_enabled:
            try:
                from services.google_sheets_service import GoogleSheetsService
                sheets_service = GoogleSheetsService(self.config)
                
                if sheets_service.enabled:
                    urls = sheets_service.load_shop_urls_from_sheets(
                        self.config.google_sheets_spreadsheet_id,
                        "Etsy Shops"
                    )
                    if urls:
                        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(urls)} URL –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏–∑ Google Sheets")
                        return urls
                    else:
                        print("‚ö†Ô∏è Google Sheets –ø—É—Å—Ç")
                        return []
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Google Sheets: {e}")
                return []
        else:
            print("‚ùå Google Sheets –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return []