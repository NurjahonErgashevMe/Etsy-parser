"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—Ä–∞—É–∑–µ—Ä–æ–º —á–µ—Ä–µ–∑ Selenium Stealth —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏—Ö –ø—Ä–æ–∫—Å–∏
"""
import time
import json
import os
import tempfile
import logging
from typing import Dict, Optional, List
try:
    from seleniumwire import webdriver
    SELENIUM_WIRE_AVAILABLE = True
except ImportError:
    from selenium import webdriver
    SELENIUM_WIRE_AVAILABLE = False
    
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
from selenium_stealth import stealth
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service
from utils.proxy_manager import ProxyManager

class BrowserService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—Ä–∞—É–∑–µ—Ä–æ–º"""
    
    def __init__(self, config):
        self.config = config
        self.driver = None
        self.captured_headers = {}
        self.max_retries = 3
        self.wait_timeout = 90  # 1.5 –º–∏–Ω—É—Ç—ã
        self.proxy_manager = ProxyManager()
        self.current_proxy = None
        self.proxy_extension_path = None
    
    def _check_chrome_installation(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ Chrome"""
        import os
        import subprocess
        
        logging.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Google Chrome...")
        
        # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ Chrome –Ω–∞ Windows
        chrome_paths = [
            r"C:\Program Files\Google\Chrome\Application\chrome.exe",
            r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe",
            os.path.expanduser(r"~\AppData\Local\Google\Chrome\Application\chrome.exe")
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ Chrome
        for path in chrome_paths:
            if os.path.exists(path):
                logging.info(f"‚úÖ Chrome –Ω–∞–π–¥–µ–Ω: {path}")
                return True
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å chrome —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
        try:
            result = subprocess.run(["chrome", "--version"], 
                                  capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                logging.info(f"‚úÖ Chrome –Ω–∞–π–¥–µ–Ω –≤ PATH: {result.stdout.strip()}")
                return True
        except:
            pass
        
        logging.error("‚ùå Google Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        logging.error("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Google Chrome: https://www.google.com/chrome/")
        logging.error("üí° –ò–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Chrome —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ø–∞–ø–∫–µ")
        return False
        
    def setup_driver(self, use_proxy: bool = True):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞ —Å stealth —Ä–µ–∂–∏–º–æ–º, –∏–º–∏—Ç–∞—Ü–∏–µ–π —á–µ–ª–æ–≤–µ–∫–∞ –∏ –ø—Ä–æ–∫—Å–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Chrome
        if not self._check_chrome_installation():
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if use_proxy:
            self.current_proxy = self.proxy_manager.get_random_proxy()
            if not self.current_proxy:
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏!")
                return False
            logging.info(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–∫—Å–∏: {self.current_proxy['host']}:{self.current_proxy['port']}")
        else:
            logging.info("üåê –ó–∞–ø—É—Å–∫ –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
            
        chrome_options = Options()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è stealth —Ä–µ–∂–∏–º–∞
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        chrome_options.add_argument("--start-maximized")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ HTML –∏ CSS
        prefs = {
            "profile.managed_default_content_settings.images": 2,  # –û—Ç–∫–ª—é—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            "profile.default_content_setting_values.notifications": 2,  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            "profile.default_content_settings.popups": 0,  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–ø–∞–ø—ã
            "profile.managed_default_content_settings.media_stream": 2,  # –û—Ç–∫–ª—é—á–∞–µ–º –º–µ–¥–∏–∞
            "profile.managed_default_content_settings.stylesheets": 1,  # –û—Å—Ç–∞–≤–ª—è–µ–º CSS
            "profile.managed_default_content_settings.javascript": 1,   # –í–ö–õ–Æ–ß–ê–ï–ú JS (—Å–∞–π—Ç —Ç—Ä–µ–±—É–µ—Ç)
            "profile.managed_default_content_settings.plugins": 2,  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–ª–∞–≥–∏–Ω—ã
            "profile.managed_default_content_settings.geolocation": 2,  # –û—Ç–∫–ª—é—á–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
            "profile.managed_default_content_settings.media_stream_mic": 2,  # –û—Ç–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
            "profile.managed_default_content_settings.media_stream_camera": 2,  # –û—Ç–∫–ª—é—á–∞–µ–º –∫–∞–º–µ—Ä—É
            "profile.default_content_setting_values.automatic_downloads": 2,  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏
        }
        chrome_options.add_experimental_option("prefs", prefs)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        chrome_options.add_argument("--disable-background-timer-throttling")
        chrome_options.add_argument("--disable-backgrounding-occluded-windows")
        chrome_options.add_argument("--disable-renderer-backgrounding")
        chrome_options.add_argument("--disable-features=TranslateUI")
        chrome_options.add_argument("--disable-ipc-flooding-protection")
        chrome_options.add_argument("--aggressive-cache-discard")
        chrome_options.add_argument("--memory-pressure-off")
        
        # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, –Ω–æ –ø–æ–¥–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ GPU
        chrome_options.add_argument("--enable-logging")
        chrome_options.add_argument("--log-level=3")  # –¢–æ–ª—å–∫–æ —Ñ–∞—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
        chrome_options.add_argument("--disable-logging")
        chrome_options.add_argument("--disable-gpu-logging")
        chrome_options.set_capability('goog:loggingPrefs', {'performance': 'ALL'})
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        chrome_options.add_argument("--disable-extensions-except")
        chrome_options.add_argument("--disable-plugins-discovery")
        chrome_options.add_argument("--disable-default-apps")
        chrome_options.add_argument("--disable-background-networking")
        chrome_options.add_argument("--disable-sync")
        chrome_options.add_argument("--disable-translate")
        chrome_options.add_argument("--disable-web-resources")
        chrome_options.add_argument("--disable-client-side-phishing-detection")
        chrome_options.add_argument("--disable-component-extensions-with-background-pages")
        chrome_options.add_argument("--disable-background-downloads")
        chrome_options.add_argument("--disable-add-to-shelf")
        chrome_options.add_argument("--disable-datasaver-prompt")
        chrome_options.add_argument("--disable-domain-reliability")
        chrome_options.add_argument("--disable-features=VizDisplayCompositor,TranslateUI")
        chrome_options.add_argument("--blink-settings=imagesEnabled=false")  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--disable-gpu-sandbox")
        chrome_options.add_argument("--disable-software-rasterizer")
        chrome_options.add_argument("--disable-plugins")
        chrome_options.add_argument("--no-first-run")
        chrome_options.add_argument("--disable-default-apps")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
        seleniumwire_options = None
        if use_proxy and self.current_proxy:
            if SELENIUM_WIRE_AVAILABLE:
                seleniumwire_options = self._get_seleniumwire_proxy_options()
            else:
                self._setup_proxy_options(chrome_options)
        
        try:
            logging.info("üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ChromeDriver...")
            
            # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ChromeDriver —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                driver_path = ChromeDriverManager().install()
                logging.info(f"‚úÖ ChromeDriver –ø—É—Ç—å: {driver_path}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Ç—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∞–π–ª
                if not driver_path.endswith('chromedriver.exe'):
                    # –ò—â–µ–º chromedriver.exe –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ
                    driver_dir = os.path.dirname(driver_path)
                    chromedriver_exe = os.path.join(driver_dir, 'chromedriver.exe')
                    if os.path.exists(chromedriver_exe):
                        driver_path = chromedriver_exe
                        logging.info(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø—É—Ç—å –∫ ChromeDriver: {driver_path}")
                    else:
                        logging.error(f"‚ùå chromedriver.exe –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {driver_dir}")
                        raise Exception("ChromeDriver executable not found")
                
                service = Service(driver_path)
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ChromeDriver: {e}")
                logging.info("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π ChromeDriver...")
                service = Service()  # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –¥—Ä–∞–π–≤–µ—Ä
            
            logging.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Chrome –±—Ä–∞—É–∑–µ—Ä...")
            if seleniumwire_options:
                self.driver = webdriver.Chrome(
                    service=service, 
                    options=chrome_options,
                    seleniumwire_options=seleniumwire_options
                )
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
                self._setup_request_blocking()
            else:
                self.driver = webdriver.Chrome(service=service, options=chrome_options)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º stealth –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            stealth(self.driver,
                   languages=["ru-RU", "ru"],
                   vendor="Google Inc.",
                   platform="Win32",
                   webgl_vendor="Intel Inc.",
                   renderer="Intel Iris OpenGL Engine",
                   fix_hairline=True)
            
            # –ú–∞–∫—Å–∏–º–∏–∑–∏—Ä—É–µ–º –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞
            self.driver.maximize_window()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–∏—Ç–∞—Ü–∏—é —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
            self._setup_human_behavior()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º IP –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏
            if use_proxy and self.current_proxy:
                self._verify_proxy_ip()
            
            logging.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ stealth —Ä–µ–∂–∏–º–µ —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π —á–µ–ª–æ–≤–µ–∫–∞")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            logging.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            logging.error(f"‚ùå –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏: {str(e)}")
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self._cleanup_proxy_extension()
            
            # –ü—ã—Ç–∞–µ–º—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É
            if "WinError 193" in str(e):
                logging.error("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º —Ñ–∞–π–ª–æ–º Chrome")
                logging.error("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
                logging.error("   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Google Chrome: https://www.google.com/chrome/")
                logging.error("   2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª/IDE")
                logging.error("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ PATH –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é")
            elif "chromedriver" in str(e).lower():
                logging.error("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ü—Ä–æ–±–ª–µ–º–∞ —Å ChromeDriver")
                logging.error("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ChromeDriver")
            elif "proxy" in str(e).lower():
                logging.error("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–∫—Å–∏")
                logging.error("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –≤ proxies.txt")
            elif "timeout" in str(e).lower():
                logging.error("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞")
                logging.error("üí° –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–∫—Å–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            elif "connection" in str(e).lower():
                logging.error("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
                logging.error("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø—Ä–æ–∫—Å–∏")
            
            return False
    
    def _setup_human_behavior(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
        try:
            # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ webdriver
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ navigator
            self.driver.execute_script("""
                Object.defineProperty(navigator, 'plugins', {
                    get: () => [1, 2, 3, 4, 5]
                });
            """)
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏
            self.driver.execute_script("""
                document.addEventListener('mousemove', function(e) {
                    window.mouseX = e.clientX;
                    window.mouseY = e.clientY;
                });
            """)
            
            logging.info("ü§ñ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è")
            
        except Exception as e:
            logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞: {e}")
    
    def _get_seleniumwire_proxy_options(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è selenium-wire"""
        proxy_url = self.proxy_manager.format_proxy_for_chrome(self.current_proxy)
        
        return {
            'proxy': {
                'http': proxy_url,
                'https': proxy_url,
            }
        }
    
    def _setup_proxy_options(self, chrome_options: Options):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ Chrome –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∫—Å–∏"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏
            try:
                self.proxy_extension_path = self.proxy_manager.get_proxy_auth_extension(self.current_proxy)
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ Chrome (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ –¥—Ä—É–≥–∏—Ö –æ–ø—Ü–∏–π)
                chrome_options.add_extension(self.proxy_extension_path)
                logging.info("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ —Å–æ–∑–¥–∞–Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            except Exception as ext_error:
                logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏: {ext_error}")
                logging.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏")
                
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è —Ä—É—á–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                pass
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            proxy_server = f"{self.current_proxy['host']}:{self.current_proxy['port']}"
            chrome_options.add_argument(f"--proxy-server=http://{proxy_server}")
            
            # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–∫—Å–∏
            chrome_options.add_argument("--ignore-certificate-errors")
            chrome_options.add_argument("--ignore-ssl-errors")
            chrome_options.add_argument("--ignore-certificate-errors-spki-list")
            chrome_options.add_argument("--ignore-certificate-errors-ssl-errors")
            chrome_options.add_argument("--allow-running-insecure-content")
            chrome_options.add_argument("--disable-web-security")
            chrome_options.add_argument("--allow-cross-origin-auth-prompt")
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            chrome_options.add_argument("--disable-features=VizDisplayCompositor")
            
            logging.info(f"üîß –ù–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–æ–∫—Å–∏: {self.current_proxy['host']}:{self.current_proxy['port']}")
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø—Ä–æ–∫—Å–∏: {e}")
            raise e
    
    def _verify_proxy_ip(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–π IP –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏"""
        try:
            logging.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º IP –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–∞–π—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IP
            self.driver.get("https://ip.decodo.com/json")
            time.sleep(3)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            page_source = self.driver.page_source
            if "ip" in page_source.lower():
                logging.info(f"‚úÖ IP –ø—Ä–æ–≤–µ—Ä–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏")
                # –ú–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å IP –∏–∑ JSON –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                import re
                ip_match = re.search(r'"ip":\s*"([^"]+)"', page_source)
                if ip_match:
                    current_ip = ip_match.group(1)
                    logging.info(f"üåê –¢–µ–∫—É—â–∏–π IP: {current_ip}")
            else:
                logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± IP")
                
        except Exception as e:
            logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IP: {e}")
    
    def _handle_captcha(self, max_wait_time: int = 60) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–ø—á—É, –æ–∂–∏–¥–∞—è –µ—ë —Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        """
        try:
            current_url = self.driver.current_url.lower()
            
            if 'captcha-delivery.com' not in current_url:
                return True  # –ö–∞–ø—á–∏ –Ω–µ—Ç
            
            logging.info("ü§ñ –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ö–ê–ü–ß–ê! –û–∂–∏–¥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è...")
            logging.info(f"üîó URL –∫–∞–ø—á–∏: {self.driver.current_url}")
            
            start_time = time.time()
            
            while time.time() - start_time < max_wait_time:
                try:
                    current_url = self.driver.current_url.lower()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—à–ª–∏ –ª–∏ –º—ã —Å –∫–∞–ø—á–∏
                    if 'captcha-delivery.com' not in current_url:
                        logging.info("‚úÖ –ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É...")
                        return True
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å –ª–∏ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
                    try:
                        continue_buttons = self.driver.find_elements(By.XPATH, 
                            "//button[contains(text(), 'Continue') or contains(text(), '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')]")
                        if continue_buttons:
                            logging.info("üîò –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –Ω–∞–∂–∏–º–∞–µ–º...")
                            continue_buttons[0].click()
                            time.sleep(3)
                            continue
                    except:
                        pass
                    
                    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                    time.sleep(2)
                    
                except Exception as e:
                    logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–ø—á–∏: {e}")
                    time.sleep(2)
            
            logging.error(f"‚ùå –ö–∞–ø—á–∞ –Ω–µ –±—ã–ª–∞ —Ä–µ—à–µ–Ω–∞ –∑–∞ {max_wait_time} —Å–µ–∫—É–Ω–¥")
            return False
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–ø—á–∏: {e}")
            return False
    
    def _cleanup_proxy_extension(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏"""
        try:
            if self.proxy_extension_path and os.path.exists(self.proxy_extension_path):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ ProxyManager –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
                self.proxy_manager.cleanup_proxy_extension(self.proxy_extension_path)
                self.proxy_extension_path = None
        except Exception as e:
            logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")
    
    def change_proxy(self) -> bool:
        """–ú–µ–Ω—è–µ—Ç –ø—Ä–æ–∫—Å–∏ –Ω–∞ –Ω–æ–≤—ã–π –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä"""
        logging.info("üîÑ –°–º–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏...")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±—Ä–∞—É–∑–µ—Ä
        self.close_browser()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏
        self.current_proxy = self.proxy_manager.get_random_proxy()
        if not self.current_proxy:
            logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏!")
            return False
        
        logging.info(f"üåê –ù–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏: {self.current_proxy['host']}:{self.current_proxy['port']}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏
        return self.setup_driver(use_proxy=True)
    
    def simulate_human_actions(self):
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        try:
            import random
            
            print("ü§ñ –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ...")
            
            # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
            time.sleep(random.uniform(2, 4))
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –º–µ–¥–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑
            total_height = self.driver.execute_script("return document.body.scrollHeight")
            current_position = 0
            scroll_steps = random.randint(3, 6)
            
            for step in range(scroll_steps):
                # –°–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–∫—Ä–æ–ª–ª–∞
                scroll_amount = random.randint(200, 600)
                current_position += scroll_amount
                
                # –ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª
                self.driver.execute_script(f"""
                    window.scrollTo({{
                        top: {current_position},
                        behavior: 'smooth'
                    }});
                """)
                
                # –ü–∞—É–∑–∞ –∫–∞–∫ –±—É–¥—Ç–æ —á–∏—Ç–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                time.sleep(random.uniform(1, 2.5))
                
                # –ò–Ω–æ–≥–¥–∞ —Å–∫—Ä–æ–ª–ª–∏–º –Ω–µ–º–Ω–æ–≥–æ –Ω–∞–∑–∞–¥ (–∫–∞–∫ —á–µ–ª–æ–≤–µ–∫)
                if random.random() < 0.3:
                    back_scroll = random.randint(50, 150)
                    self.driver.execute_script(f"""
                        window.scrollTo({{
                            top: {current_position - back_scroll},
                            behavior: 'smooth'
                        }});
                    """)
                    time.sleep(random.uniform(0.5, 1))
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç—è—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            self._simulate_realistic_mouse_movement()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            self.driver.execute_script("""
                window.scrollTo({
                    top: 0,
                    behavior: 'smooth'
                });
            """)
            time.sleep(random.uniform(1, 2))
            
            print("‚úÖ –ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–∏—Ç–∞—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π: {e}")
    
    def _simulate_realistic_mouse_movement(self):
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏"""
        try:
            import random
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
            window_size = self.driver.get_window_size()
            width = window_size['width']
            height = window_size['height']
            
            # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π –º—ã—à–∏
            for _ in range(random.randint(2, 4)):
                x = random.randint(100, width - 100)
                y = random.randint(100, height - 100)
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏
                self.driver.execute_script(f"""
                    var event = new MouseEvent('mousemove', {{
                        clientX: {x},
                        clientY: {y},
                        bubbles: true
                    }});
                    document.dispatchEvent(event);
                """)
                
                time.sleep(random.uniform(0.3, 0.8))
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–∏—Ç–∞—Ü–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏: {e}")
    
    def wait_for_successful_request(self, target_url: str):
        """–ñ–¥–µ—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (200) –∫ —Ü–µ–ª–µ–≤–æ–º—É URL. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (success, status_code)"""
        print(f"üîç –û–∂–∏–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫: {target_url}")
        
        start_time = time.time()
        last_status = None
        last_activity_time = start_time
        inactivity_timeout = 60  # 1 –º–∏–Ω—É—Ç–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
        
        while time.time() - start_time < self.wait_timeout:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                logs = self.driver.get_log('performance')
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –ª–æ–≥–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                if logs:
                    last_activity_time = time.time()
                
                for log in logs:
                    message = json.loads(log['message'])
                    
                    # –ò—â–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                    if message['message']['method'] == 'Network.responseReceived':
                        response = message['message']['params']['response']
                        url = response['url']
                        status = response['status']
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ –Ω–∞—à —Ü–µ–ª–µ–≤–æ–π URL
                        if target_url in url:
                            last_status = status
                            
                            if status == 200:
                                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç (200) –¥–ª—è {url}")
                                
                                # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º headers
                                self.captured_headers = response.get('headers', {})
                                print(f"üìã –ó–∞—Ö–≤–∞—á–µ–Ω–æ {len(self.captured_headers)} headers")
                                
                                return True, 200
                            elif status == 403:
                                print(f"üö´ –ü–æ–ª—É—á–µ–Ω 403 –æ—Ç–≤–µ—Ç –¥–ª—è {url}")
                                return False, 403
                            elif status == 429:
                                print(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω 429 (Too Many Requests) –¥–ª—è {url}")
                                return False, 429
                            else:
                                print(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω {status} –æ—Ç–≤–µ—Ç –¥–ª—è {url}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                current_time = time.time()
                if current_time - last_activity_time > inactivity_timeout:
                    print(f"‚è∞ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤—É–µ—Ç {inactivity_timeout}s - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞")
                    self.driver.refresh()
                    self._wait_for_page_load()
                    last_activity_time = current_time
                    print("üîÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ...")
                
                time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–æ–≥–æ–≤: {e}")
                time.sleep(1)
        
        print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è ({self.wait_timeout}s) –¥–ª—è {target_url}")
        return False, last_status or 'timeout'
    

    
    def load_page_with_403_handling(self, url: str) -> tuple[bool, bool]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π 403 –æ—à–∏–±–æ–∫.
        –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ 403 –¥–µ–ª–∞–µ—Ç 3 –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–ø—á–∞),
        —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ 3 –Ω–µ—É–¥–∞—á —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (success, need_browser_restart)
        """
        shop_name = url.split('/')[-1] if '/' in url else 'unknown'
        max_403_retries = 3
        
        for attempt in range(max_403_retries):
            print(f"\nüöÄ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_403_retries} –∑–∞–≥—Ä—É–∑–∫–∏ {shop_name}")
            
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                self.driver.get(url)
                
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                try:
                    WebDriverWait(self.driver, 10).until(
                        EC.presence_of_element_located((By.TAG_NAME, "body"))
                    )
                    logging.info("üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –æ–∂–∏–¥–∞–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
                except TimeoutException:
                    logging.info("‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–æ...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–∞–ø—á—É –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë
                if 'captcha-delivery.com' in self.driver.current_url.lower():
                    logging.info("ü§ñ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞, –ø—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å...")
                    if not self._handle_captcha(max_wait_time=30):
                        logging.info("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–ø—á—É, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–º–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏")
                        return False, True
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                self.simulate_human_actions()
                
                # –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
                success, status = self.wait_for_successful_request(url)
                
                if success:
                    logging.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {shop_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
                    return True, False
                elif status == 403:
                    logging.info(f"üö´ –ü–æ–ª—É—á–µ–Ω 403 –¥–ª—è {shop_name} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_403_retries})")
                    
                    if attempt < max_403_retries - 1:
                        logging.info("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ (–≤–æ–∑–º–æ–∂–Ω–æ –∫–∞–ø—á–∞)...")
                        time.sleep(10)
                        self.driver.refresh()
                        self._wait_for_page_load()
                        continue
                    else:
                        logging.info("‚ùå –ü–æ–ª—É—á–µ–Ω 403 –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä")
                        return False, True
                else:
                    # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
                    logging.info(f"‚ùå –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å {status} –¥–ª—è {shop_name}")
                    return False, False
                    
            except WebDriverException as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ WebDriver: {e}")
                if attempt < max_403_retries - 1:
                    time.sleep(5)
                else:
                    return False, True
        
        return False, False

    def load_page_with_retries(self, url: str) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö"""
        shop_name = url.split('/')[-1] if '/' in url else 'unknown'
        
        for attempt in range(self.max_retries):
            print(f"\nüöÄ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries} –∑–∞–≥—Ä—É–∑–∫–∏ {shop_name}")
            
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                self.driver.get(url)
                
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                try:
                    WebDriverWait(self.driver, 10).until(
                        EC.presence_of_element_located((By.TAG_NAME, "body"))
                    )
                    print("üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –æ–∂–∏–¥–∞–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
                except TimeoutException:
                    print("‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–æ...")
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                self.simulate_human_actions()
                
                # –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
                success, status = self.wait_for_successful_request(url)
                
                if success:
                    print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {shop_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
                    return True
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è {shop_name}. –°—Ç–∞—Ç—É—Å: {status}")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
                    if status == 429:
                        print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ 429 (Too Many Requests)")
                        if attempt < self.max_retries - 1:
                            wait_time = 10 + (attempt * 5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                            print(f"üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...")
                            time.sleep(wait_time)
                            self.driver.refresh()
                            # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
                            self._wait_for_page_load()
                        continue
                        
                    elif status == 403:
                        print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ 403 (Forbidden)")
                        if attempt < self.max_retries - 1:
                            print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                            time.sleep(5)
                            self.driver.refresh()
                            self._wait_for_page_load()
                        continue
                        
                    else:
                        print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {status}")
                        if attempt < self.max_retries - 1:
                            time.sleep(5)
                            self.driver.refresh()
                            self._wait_for_page_load()
                        continue
                    
            except WebDriverException as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ WebDriver: {e}")
                if attempt < self.max_retries - 1:
                    time.sleep(5)
        
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {shop_name} –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫")
        print("üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞")
        return False
    
    def _wait_for_page_load(self):
        """–ñ–¥–µ—Ç –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            WebDriverWait(self.driver, 15).until(
                lambda driver: driver.execute_script("return document.readyState") == "complete"
            )
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            time.sleep(3)
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except TimeoutException:
            print("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    
    def wait_for_products_and_stop_loading(self, max_wait_time: int = 30) -> bool:
        """
        –ñ–¥–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –Ω–∞–π–¥–µ–Ω—ã, False –µ—Å–ª–∏ —Ç–∞–π–º–∞—É—Ç.
        """
        print("üõçÔ∏è –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤...")
        start_time = time.time()
        
        while time.time() - start_time < max_wait_time:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
                page_source = self.driver.page_source
                if 'shop_home_listing_grid' in page_source:
                    print("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –Ω–∞–π–¥–µ–Ω!")
                    
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    try:
                        self.driver.execute_script("window.stop();")
                        print("üõë –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                    except:
                        pass
                    
                    return True
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                time.sleep(0.5)
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
                time.sleep(1)
        
        print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ ({max_wait_time}s)")
        return False
    
    def _setup_request_blocking(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–µ–Ω—É–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ selenium-wire"""
        if not SELENIUM_WIRE_AVAILABLE:
            return
        
        def request_interceptor(request):
            # –°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤ –∏ –ø—É—Ç–µ–π –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            blocked_domains = [
                'bat.bing.com',
                'podscribe.com', 
                'googleapis.com',
                'google.com/c2dm',
                'pinterest.com',
                'qualtrics.com',
                'adsrvr.org',
                'imrworldwide.com',
                'tapad.com',
                'adnxs.com',
                'gvt2.com',
                'facebook.com',
                'doubleclick.net',
                'googlesyndication.com',
                'googletagmanager.com',
                'google-analytics.com',
                'hotjar.com',
                'mixpanel.com',
                'segment.com',
                'amplitude.com'
            ]
            
            blocked_extensions = ['.js', '.woff', '.woff2', '.ttf', '.eot']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–µ–Ω
            for domain in blocked_domains:
                if domain in request.url:
                    print(f"üö´ –ë–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ {domain}")
                    request.abort()
                    return
            
            # –ë–ª–æ–∫–∏—Ä—É–µ–º JS —Ñ–∞–π–ª—ã (–∫—Ä–æ–º–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö Etsy)
            if any(request.url.endswith(ext) for ext in blocked_extensions):
                if 'etsy.com' not in request.url or '/include/tags.js' in request.url:
                    print(f"üö´ –ë–ª–æ–∫–∏—Ä—É–µ–º —Ä–µ—Å—É—Ä—Å: {request.url}")
                    request.abort()
                    return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫
        self.driver.request_interceptor = request_interceptor
        print("üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ–Ω—É–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    def get_page_source(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML –∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        if not self.driver:
            return ""
        return self.driver.page_source
    
    def get_captured_headers(self) -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã–µ headers"""
        return self.captured_headers.copy()
    
    def navigate_to_page(self, url: str) -> bool:
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        try:
            self.driver.get(url)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ {url}: {e}")
            return False
    
    def wait_for_element(self, selector: str, timeout: int = 10) -> bool:
        """–ñ–¥–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        try:
            WebDriverWait(self.driver, timeout).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, selector))
            )
            return True
        except TimeoutException:
            return False
    
    def open_devtools(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç DevTools –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ"""
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º DevTools —á–µ—Ä–µ–∑ F12
            self.driver.execute_script("window.open('', '_blank').close();")
            from selenium.webdriver.common.keys import Keys
            from selenium.webdriver.common.action_chains import ActionChains
            
            # –ù–∞–∂–∏–º–∞–µ–º F12 –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è DevTools
            ActionChains(self.driver).send_keys(Keys.F12).perform()
            time.sleep(1)
            print("üîß DevTools –æ—Ç–∫—Ä—ã—Ç—ã")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å DevTools: {e}")
    
    def close_browser(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        if self.driver:
            try:
                # –ü–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –≤—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                self._debug_pagination_before_close()
                
                self.driver.quit()
                print("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            finally:
                self.driver = None
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–∫—Å–∏
        self._cleanup_proxy_extension()
    
    def _debug_pagination_before_close(self):
        """–í—ã–≤–æ–¥–∏—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            print("\nüîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –±—Ä–∞—É–∑–µ—Ä–∞...")
            
            html_content = self.driver.page_source
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(html_content, 'html.parser')
            
            # –ò—â–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            pagination_nav = soup.find('nav', {'data-clg-id': 'WtPagination'})
            if pagination_nav:
                pagination_links = pagination_nav.find_all('a', class_='wt-action-group__item')
                print(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ {len(pagination_links)} —Å—Å—ã–ª–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –º–æ–º–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç–∏—è")
                
                # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                current_page = None
                for link in pagination_links:
                    if link.get('aria-current') == 'true':
                        current_page = link.get_text(strip=True)
                        break
                
                if current_page:
                    print(f"üîç DEBUG: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {current_page}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    last_page_num = None
                    for link in pagination_links:
                        page_text = link.get_text(strip=True)
                        if page_text.isdigit():
                            last_page_num = max(last_page_num or 0, int(page_text))
                    
                    if last_page_num:
                        print(f"üîç DEBUG: –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–∏–¥–∏–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {last_page_num}")
                        if int(current_page) >= last_page_num:
                            print("‚úÖ DEBUG: –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç–∏–≥–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                        else:
                            print("‚ö†Ô∏è DEBUG: –í–æ–∑–º–æ–∂–Ω–æ, –µ—Å—Ç—å –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã!")
                else:
                    print("‚ö†Ô∏è DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
            else:
                print("‚ö†Ô∏è DEBUG: –ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏")
                
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
    
    def _setup_request_blocking(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ —á–µ—Ä–µ–∑ selenium-wire"""
        if not SELENIUM_WIRE_AVAILABLE:
            return
            
        def request_interceptor(request):
            # –ë–ª–æ–∫–∏—Ä—É–µ–º—ã–µ –¥–æ–º–µ–Ω—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            blocked_domains = [
                'google-analytics.com',
                'googletagmanager.com',
                'facebook.com',
                'facebook.net',
                'doubleclick.net',
                'googlesyndication.com',
                'adsystem.com',
                'amazon-adsystem.com',
                'bat.bing.com',
                'podscribe.com',
                'googleapis.com',
                'pinterest.com',
                'adsrvr.org',
                'imrworldwide.com',
                'tapad.com',
                'qualtrics.com',
                'adnxs.com',
                'gcp.gvt2.com',
                'clients.google.com'
            ]
            
            # –ë–ª–æ–∫–∏—Ä—É–µ–º—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ (–ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º JS - —Å–∞–π—Ç —Ç—Ä–µ–±—É–µ—Ç)
            blocked_extensions = [
                '.woff',
                '.woff2',
                '.ttf',
                '.eot',
                '.svg',
                '.png',
                '.jpg',
                '.jpeg',
                '.gif',
                '.webp',
                '.ico',
                '.mp4',
                '.webm',
                '.mp3'
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–µ–Ω
            for domain in blocked_domains:
                if domain in request.url:
                    print(f"üö´ –ë–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ {domain}")
                    request.abort()
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            for ext in blocked_extensions:
                if request.url.endswith(ext):
                    print(f"üö´ –ë–ª–æ–∫–∏—Ä—É–µ–º —Ñ–∞–π–ª {ext}")
                    request.abort()
                    return
            
            # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∏ —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤—ã–µ JS (—Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ JS —Å–∞–π—Ç–∞)
            if any(js_pattern in request.url.lower() for js_pattern in [
                'analytics', 'tracking', 'gtag', 'fbevents', 'pixel',
                'doubleclick', 'googlesyndication', 'amazon-adsystem'
            ]) and 'etsy.com' not in request.url:
                print(f"üö´ –ë–ª–æ–∫–∏—Ä—É–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–π JS: {request.url[:100]}...")
                request.abort()
                return
                
            print(f"‚úÖ –†–∞–∑—Ä–µ—à–∞–µ–º: {request.url[:100]}...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
        self.driver.request_interceptor = request_interceptor
        print("üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤")
    
    def restart_browser(self, change_proxy: bool = True) -> bool:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä (–Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä) —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–º–µ–Ω—ã –ø—Ä–æ–∫—Å–∏"""
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")
        self.close_browser()
        time.sleep(3)
        
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –ø—Ä–æ–∫—Å–∏, –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π
        if change_proxy:
            self.current_proxy = self.proxy_manager.get_random_proxy()
            if not self.current_proxy:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏!")
                return False
            print(f"üåê –ù–æ–≤—ã–π —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–∫—Å–∏: {self.current_proxy['host']}:{self.current_proxy['port']}")
        
        return self.setup_driver(use_proxy=True)
    
    def __enter__(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥"""
        self.setup_driver()
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥"""
        self.close_browser()