"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—Ä–∞—É–∑–µ—Ä–æ–º —á–µ—Ä–µ–∑ Selenium Stealth
"""
import time
import json
from typing import Dict, Optional, List
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
from selenium_stealth import stealth
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service

class BrowserService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—Ä–∞—É–∑–µ—Ä–æ–º"""
    
    def __init__(self, config):
        self.config = config
        self.driver = None
        self.captured_headers = {}
        self.max_retries = 3
        self.wait_timeout = 90  # 1.5 –º–∏–Ω—É—Ç—ã
        
    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞ —Å stealth —Ä–µ–∂–∏–º–æ–º –∏ –∏–º–∏—Ç–∞—Ü–∏–µ–π —á–µ–ª–æ–≤–µ–∫–∞"""
        chrome_options = Options()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è stealth —Ä–µ–∂–∏–º–∞
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        chrome_options.add_argument("--start-maximized")
        
        # –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ DevTools (–≤—ã–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π)
        # chrome_options.add_argument("--auto-open-devtools-for-tabs")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞
        prefs = {
            "profile.managed_default_content_settings.images": 2,  # –û—Ç–∫–ª—é—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            "profile.default_content_setting_values.notifications": 2,
            "profile.default_content_settings.popups": 0,
            "profile.managed_default_content_settings.media_stream": 1
        }
        chrome_options.add_experimental_option("prefs", prefs)
        
        # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        chrome_options.add_argument("--enable-logging")
        chrome_options.add_argument("--log-level=0")
        chrome_options.set_capability('goog:loggingPrefs', {'performance': 'ALL'})
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--disable-extensions")
        chrome_options.add_argument("--disable-plugins")
        # –£–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –æ–ø—Ü–∏–∏
        # chrome_options.add_argument("--disable-images")  # –£–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã —á–µ—Ä–µ–∑ prefs
        # chrome_options.add_argument("--disable-javascript")  # JS –Ω—É–∂–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∞–π—Ç–∞
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–ø—Ü–∏–∏
        # chrome_options.add_argument("--disable-web-security")
        # chrome_options.add_argument("--allow-running-insecure-content")
        
        try:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ ChromeDriver
            service = Service(ChromeDriverManager().install())
            self.driver = webdriver.Chrome(service=service, options=chrome_options)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º stealth –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            stealth(self.driver,
                   languages=["ru-RU", "ru"],
                   vendor="Google Inc.",
                   platform="Win32",
                   webgl_vendor="Intel Inc.",
                   renderer="Intel Iris OpenGL Engine",
                   fix_hairline=True)
            
            # –ú–∞–∫—Å–∏–º–∏–∑–∏—Ä—É–µ–º –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞
            self.driver.maximize_window()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–∏—Ç–∞—Ü–∏—é —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
            self._setup_human_behavior()
            
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ stealth —Ä–µ–∂–∏–º–µ —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π —á–µ–ª–æ–≤–µ–∫–∞")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False
    
    def _setup_human_behavior(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
        try:
            # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ webdriver
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ navigator
            self.driver.execute_script("""
                Object.defineProperty(navigator, 'plugins', {
                    get: () => [1, 2, 3, 4, 5]
                });
            """)
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏
            self.driver.execute_script("""
                document.addEventListener('mousemove', function(e) {
                    window.mouseX = e.clientX;
                    window.mouseY = e.clientY;
                });
            """)
            
            print("ü§ñ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞: {e}")
    
    def simulate_human_actions(self):
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        try:
            import random
            
            print("ü§ñ –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ...")
            
            # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
            time.sleep(random.uniform(2, 4))
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –º–µ–¥–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑
            total_height = self.driver.execute_script("return document.body.scrollHeight")
            current_position = 0
            scroll_steps = random.randint(3, 6)
            
            for step in range(scroll_steps):
                # –°–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–∫—Ä–æ–ª–ª–∞
                scroll_amount = random.randint(200, 600)
                current_position += scroll_amount
                
                # –ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª
                self.driver.execute_script(f"""
                    window.scrollTo({{
                        top: {current_position},
                        behavior: 'smooth'
                    }});
                """)
                
                # –ü–∞—É–∑–∞ –∫–∞–∫ –±—É–¥—Ç–æ —á–∏—Ç–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                time.sleep(random.uniform(1, 2.5))
                
                # –ò–Ω–æ–≥–¥–∞ —Å–∫—Ä–æ–ª–ª–∏–º –Ω–µ–º–Ω–æ–≥–æ –Ω–∞–∑–∞–¥ (–∫–∞–∫ —á–µ–ª–æ–≤–µ–∫)
                if random.random() < 0.3:
                    back_scroll = random.randint(50, 150)
                    self.driver.execute_script(f"""
                        window.scrollTo({{
                            top: {current_position - back_scroll},
                            behavior: 'smooth'
                        }});
                    """)
                    time.sleep(random.uniform(0.5, 1))
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç—è—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            self._simulate_realistic_mouse_movement()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            self.driver.execute_script("""
                window.scrollTo({
                    top: 0,
                    behavior: 'smooth'
                });
            """)
            time.sleep(random.uniform(1, 2))
            
            print("‚úÖ –ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–∏—Ç–∞—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π: {e}")
    
    def _simulate_realistic_mouse_movement(self):
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏"""
        try:
            import random
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
            window_size = self.driver.get_window_size()
            width = window_size['width']
            height = window_size['height']
            
            # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π –º—ã—à–∏
            for _ in range(random.randint(2, 4)):
                x = random.randint(100, width - 100)
                y = random.randint(100, height - 100)
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏
                self.driver.execute_script(f"""
                    var event = new MouseEvent('mousemove', {{
                        clientX: {x},
                        clientY: {y},
                        bubbles: true
                    }});
                    document.dispatchEvent(event);
                """)
                
                time.sleep(random.uniform(0.3, 0.8))
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–∏—Ç–∞—Ü–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏: {e}")
    
    def wait_for_successful_request(self, target_url: str):
        """–ñ–¥–µ—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (200) –∫ —Ü–µ–ª–µ–≤–æ–º—É URL. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (success, status_code)"""
        print(f"üîç –û–∂–∏–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫: {target_url}")
        
        start_time = time.time()
        last_status = None
        
        while time.time() - start_time < self.wait_timeout:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                logs = self.driver.get_log('performance')
                
                for log in logs:
                    message = json.loads(log['message'])
                    
                    # –ò—â–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                    if message['message']['method'] == 'Network.responseReceived':
                        response = message['message']['params']['response']
                        url = response['url']
                        status = response['status']
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ –Ω–∞—à —Ü–µ–ª–µ–≤–æ–π URL
                        if target_url in url:
                            last_status = status
                            
                            if status == 200:
                                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç (200) –¥–ª—è {url}")
                                
                                # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º headers
                                self.captured_headers = response.get('headers', {})
                                print(f"üìã –ó–∞—Ö–≤–∞—á–µ–Ω–æ {len(self.captured_headers)} headers")
                                
                                return True, 200
                            elif status == 403:
                                print(f"üö´ –ü–æ–ª—É—á–µ–Ω 403 –æ—Ç–≤–µ—Ç –¥–ª—è {url}")
                                return False, 403
                            elif status == 429:
                                print(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω 429 (Too Many Requests) –¥–ª—è {url}")
                                return False, 429
                            else:
                                print(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω {status} –æ—Ç–≤–µ—Ç –¥–ª—è {url}")
                
                time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–æ–≥–æ–≤: {e}")
                time.sleep(1)
        
        print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è ({self.wait_timeout}s) –¥–ª—è {target_url}")
        return False, last_status or 'timeout'
    

    
    def load_page_with_403_handling(self, url: str) -> tuple[bool, bool]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π 403 –æ—à–∏–±–æ–∫.
        –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ 403 –¥–µ–ª–∞–µ—Ç 3 –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–ø—á–∞),
        —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ 3 –Ω–µ—É–¥–∞—á —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (success, need_browser_restart)
        """
        shop_name = url.split('/')[-1] if '/' in url else 'unknown'
        max_403_retries = 3
        
        for attempt in range(max_403_retries):
            print(f"\nüöÄ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_403_retries} –∑–∞–≥—Ä—É–∑–∫–∏ {shop_name}")
            
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                self.driver.get(url)
                
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                try:
                    WebDriverWait(self.driver, 10).until(
                        EC.presence_of_element_located((By.TAG_NAME, "body"))
                    )
                    print("üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –æ–∂–∏–¥–∞–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
                except TimeoutException:
                    print("‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–æ...")
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                self.simulate_human_actions()
                
                # –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
                success, status = self.wait_for_successful_request(url)
                
                if success:
                    print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {shop_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
                    return True, False
                elif status == 403:
                    print(f"üö´ –ü–æ–ª—É—á–µ–Ω 403 –¥–ª—è {shop_name} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_403_retries})")
                    
                    if attempt < max_403_retries - 1:
                        print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ (–≤–æ–∑–º–æ–∂–Ω–æ –∫–∞–ø—á–∞)...")
                        time.sleep(5)
                        self.driver.refresh()
                        self._wait_for_page_load()
                        continue
                    else:
                        print("‚ùå –ü–æ–ª—É—á–µ–Ω 403 –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä")
                        return False, True
                else:
                    # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
                    print(f"‚ùå –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å {status} –¥–ª—è {shop_name}")
                    return False, False
                    
            except WebDriverException as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ WebDriver: {e}")
                if attempt < max_403_retries - 1:
                    time.sleep(5)
                else:
                    return False, True
        
        return False, False

    def load_page_with_retries(self, url: str) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö"""
        shop_name = url.split('/')[-1] if '/' in url else 'unknown'
        
        for attempt in range(self.max_retries):
            print(f"\nüöÄ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries} –∑–∞–≥—Ä—É–∑–∫–∏ {shop_name}")
            
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                self.driver.get(url)
                
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                try:
                    WebDriverWait(self.driver, 10).until(
                        EC.presence_of_element_located((By.TAG_NAME, "body"))
                    )
                    print("üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –æ–∂–∏–¥–∞–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
                except TimeoutException:
                    print("‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–æ...")
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                self.simulate_human_actions()
                
                # –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
                success, status = self.wait_for_successful_request(url)
                
                if success:
                    print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {shop_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
                    return True
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è {shop_name}. –°—Ç–∞—Ç—É—Å: {status}")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
                    if status == 429:
                        print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ 429 (Too Many Requests)")
                        if attempt < self.max_retries - 1:
                            wait_time = 10 + (attempt * 5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                            print(f"üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...")
                            time.sleep(wait_time)
                            self.driver.refresh()
                            # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
                            self._wait_for_page_load()
                        continue
                        
                    elif status == 403:
                        print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ 403 (Forbidden)")
                        if attempt < self.max_retries - 1:
                            print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                            time.sleep(5)
                            self.driver.refresh()
                            self._wait_for_page_load()
                        continue
                        
                    else:
                        print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {status}")
                        if attempt < self.max_retries - 1:
                            time.sleep(5)
                            self.driver.refresh()
                            self._wait_for_page_load()
                        continue
                    
            except WebDriverException as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ WebDriver: {e}")
                if attempt < self.max_retries - 1:
                    time.sleep(5)
        
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {shop_name} –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫")
        print("üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞")
        return False
    
    def _wait_for_page_load(self):
        """–ñ–¥–µ—Ç –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            WebDriverWait(self.driver, 15).until(
                lambda driver: driver.execute_script("return document.readyState") == "complete"
            )
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            time.sleep(3)
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except TimeoutException:
            print("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    
    def get_page_source(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML –∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        if not self.driver:
            return ""
        return self.driver.page_source
    
    def get_captured_headers(self) -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã–µ headers"""
        return self.captured_headers.copy()
    
    def navigate_to_page(self, url: str) -> bool:
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        try:
            self.driver.get(url)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ {url}: {e}")
            return False
    
    def wait_for_element(self, selector: str, timeout: int = 10) -> bool:
        """–ñ–¥–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        try:
            WebDriverWait(self.driver, timeout).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, selector))
            )
            return True
        except TimeoutException:
            return False
    
    def open_devtools(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç DevTools –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ"""
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º DevTools —á–µ—Ä–µ–∑ F12
            self.driver.execute_script("window.open('', '_blank').close();")
            from selenium.webdriver.common.keys import Keys
            from selenium.webdriver.common.action_chains import ActionChains
            
            # –ù–∞–∂–∏–º–∞–µ–º F12 –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è DevTools
            ActionChains(self.driver).send_keys(Keys.F12).perform()
            time.sleep(1)
            print("üîß DevTools –æ—Ç–∫—Ä—ã—Ç—ã")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å DevTools: {e}")
    
    def close_browser(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        if self.driver:
            try:
                # –ü–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –≤—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                self._debug_pagination_before_close()
                
                self.driver.quit()
                print("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            finally:
                self.driver = None
    
    def _debug_pagination_before_close(self):
        """–í—ã–≤–æ–¥–∏—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            print("\nüîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –±—Ä–∞—É–∑–µ—Ä–∞...")
            
            html_content = self.driver.page_source
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(html_content, 'html.parser')
            
            # –ò—â–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            pagination_nav = soup.find('nav', {'data-clg-id': 'WtPagination'})
            if pagination_nav:
                pagination_links = pagination_nav.find_all('a', class_='wt-action-group__item')
                print(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ {len(pagination_links)} —Å—Å—ã–ª–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –º–æ–º–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç–∏—è")
                
                # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                current_page = None
                for link in pagination_links:
                    if link.get('aria-current') == 'true':
                        current_page = link.get_text(strip=True)
                        break
                
                if current_page:
                    print(f"üîç DEBUG: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {current_page}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    last_page_num = None
                    for link in pagination_links:
                        page_text = link.get_text(strip=True)
                        if page_text.isdigit():
                            last_page_num = max(last_page_num or 0, int(page_text))
                    
                    if last_page_num:
                        print(f"üîç DEBUG: –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–∏–¥–∏–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {last_page_num}")
                        if int(current_page) >= last_page_num:
                            print("‚úÖ DEBUG: –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç–∏–≥–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                        else:
                            print("‚ö†Ô∏è DEBUG: –í–æ–∑–º–æ–∂–Ω–æ, –µ—Å—Ç—å –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã!")
                else:
                    print("‚ö†Ô∏è DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
            else:
                print("‚ö†Ô∏è DEBUG: –ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏")
                
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
    
    def restart_browser(self) -> bool:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä (–Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä)"""
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")
        self.close_browser()
        time.sleep(3)
        return self.setup_driver()
    
    def __enter__(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥"""
        self.setup_driver()
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥"""
        self.close_browser()