"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏–º–∏ –ø—Ä–æ–∫—Å–∏
"""
import random
import logging
from typing import List, Dict, Optional, Tuple

class ProxyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞ proxies.txt"""
    
    def __init__(self, proxy_file_path: str = "proxies.txt"):
        self.proxy_file_path = proxy_file_path
        self.proxies = []
        self.current_proxy_index = 0
        self.load_proxies()
    
    def load_proxies(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(self.proxy_file_path, 'r', encoding='utf-8') as file:
                lines = file.readlines()
            
            self.proxies = []
            for line_num, line in enumerate(lines, 1):
                line = line.strip()
                if line and not line.startswith('#'):
                    proxy_data = self.parse_proxy_line(line)
                    if proxy_data and self.validate_proxy_data(proxy_data):
                        self.proxies.append(proxy_data)
                    elif proxy_data:
                        logging.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–µ {line_num}: {line}")
            
            logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.proxies)} –ø—Ä–æ–∫—Å–∏ –∏–∑ {self.proxy_file_path}")
            
            if not self.proxies:
                logging.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–∞–π–ª–µ!")
                
        except FileNotFoundError:
            logging.error(f"‚ùå –§–∞–π–ª –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.proxy_file_path}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–∫—Å–∏: {e}")
    
    def parse_proxy_line(self, line: str) -> Optional[Dict[str, str]]:
        """
        –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: host:port:username:password
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–∫—Å–∏
        """
        try:
            parts = line.split(':')
            if len(parts) >= 4:
                host = parts[0].strip()
                port = parts[1].strip()
                username = parts[2].strip()
                # –ü–∞—Ä–æ–ª—å –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª—ã ':', –ø–æ—ç—Ç–æ–º—É –æ–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏
                password = ':'.join(parts[3:]).strip()
                
                return {
                    'host': host,
                    'port': port,
                    'username': username,
                    'password': password
                }
            else:
                logging.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏: {line}")
                return None
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø—Ä–æ–∫—Å–∏ '{line}': {e}")
            return None
    
    def get_random_proxy(self) -> Optional[Dict[str, str]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–∫—Å–∏"""
        if not self.proxies:
            logging.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏!")
            return None
        
        proxy = random.choice(self.proxies)
        logging.info(f"üîÑ –í—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–∫—Å–∏: {proxy['host']}:{proxy['port']}")
        return proxy
    
    def get_next_proxy(self) -> Optional[Dict[str, str]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–∫—Å–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É"""
        if not self.proxies:
            logging.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏!")
            return None
        
        proxy = self.proxies[self.current_proxy_index]
        self.current_proxy_index = (self.current_proxy_index + 1) % len(self.proxies)
        
        logging.info(f"üîÑ –í—ã–±—Ä–∞–Ω –ø—Ä–æ–∫—Å–∏ #{self.current_proxy_index}: {proxy['host']}:{proxy['port']} (user: {proxy['username']})")
        return proxy
    
    def format_proxy_for_chrome(self, proxy_data: Dict[str, str]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Chrome
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞: http://username:password@host:port
        """
        return f"http://{proxy_data['username']}:{proxy_data['password']}@{proxy_data['host']}:{proxy_data['port']}"
    
    def format_proxy_for_requests(self, proxy_data: Dict[str, str]) -> Dict[str, str]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ requests
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å http –∏ https –ø—Ä–æ–∫—Å–∏
        """
        proxy_url = f"http://{proxy_data['username']}:{proxy_data['password']}@{proxy_data['host']}:{proxy_data['port']}"
        return {
            'http': proxy_url,
            'https': proxy_url
        }
    
    def get_proxy_auth_extension(self, proxy_data: Dict[str, str]) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç Chrome extension –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–Ω–µ zip)
        """
        import os
        import tempfile
        import json
        import stat
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
        try:
            extension_dir = tempfile.mkdtemp(prefix="proxy_auth_")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞ –Ω–∞ –ø–∞–ø–∫—É
            os.chmod(extension_dir, stat.S_IRWXU | stat.S_IRWXG | stat.S_IRWXO)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {e}")
            # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            import uuid
            extension_dir = f"proxy_auth_{uuid.uuid4().hex[:8]}"
            os.makedirs(extension_dir, exist_ok=True)
            os.chmod(extension_dir, stat.S_IRWXU | stat.S_IRWXG | stat.S_IRWXO)
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –ø–∞—Ä–æ–ª–µ –¥–ª—è JavaScript
        escaped_password = proxy_data['password'].replace('\\', '\\\\').replace('"', '\\"').replace("'", "\\'")
        escaped_username = proxy_data['username'].replace('\\', '\\\\').replace('"', '\\"').replace("'", "\\'")
        
        # –°–æ–∑–¥–∞–µ–º manifest.json –¥–ª—è Manifest V2 (–±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–ª—è –ø—Ä–æ–∫—Å–∏)
        manifest_content = {
            "version": "1.0.0",
            "manifest_version": 2,
            "name": "Proxy Auth Extension",
            "permissions": [
                "proxy",
                "tabs",
                "unlimitedStorage",
                "storage",
                "<all_urls>",
                "webRequest",
                "webRequestBlocking"
            ],
            "background": {
                "scripts": ["background.js"],
                "persistent": True
            },
            "minimum_chrome_version": "22.0.0"
        }
        
        # –°–æ–∑–¥–∞–µ–º background.js —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        background_content = f"""
// –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
const PROXY_HOST = "{proxy_data['host']}";
const PROXY_PORT = {proxy_data['port']};
const PROXY_USERNAME = "{escaped_username}";
const PROXY_PASSWORD = "{escaped_password}";

console.log("üöÄ Proxy Auth Extension –∑–∞–≥—Ä—É–∂–µ–Ω–æ");
console.log("üì° –ü—Ä–æ–∫—Å–∏:", PROXY_HOST + ":" + PROXY_PORT);
console.log("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", PROXY_USERNAME);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
const proxyConfig = {{
    mode: "fixed_servers",
    rules: {{
        singleProxy: {{
            scheme: "http",
            host: PROXY_HOST,
            port: PROXY_PORT
        }},
        bypassList: [
            "localhost",
            "127.0.0.1",
            "*.local",
            "10.*",
            "192.168.*",
            "172.16.*",
            "172.17.*",
            "172.18.*",
            "172.19.*",
            "172.20.*",
            "172.21.*",
            "172.22.*",
            "172.23.*",
            "172.24.*",
            "172.25.*",
            "172.26.*",
            "172.27.*",
            "172.28.*",
            "172.29.*",
            "172.30.*",
            "172.31.*"
        ]
    }}
}};

// –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
chrome.proxy.settings.set({{
    value: proxyConfig,
    scope: "regular"
}}, function() {{
    if (chrome.runtime.lastError) {{
        console.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏:", chrome.runtime.lastError);
    }} else {{
        console.log("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
    }}
}});

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
function handleProxyAuth(details) {{
    console.log("üîê –ó–∞–ø—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è:", details.url);
    console.log("üîê Challenger:", details.challenger);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –∫ –Ω–∞—à–µ–º—É –ø—Ä–æ–∫—Å–∏
    if (details.challenger && 
        (details.challenger.host === PROXY_HOST || 
         details.url.includes(PROXY_HOST))) {{
        
        console.log("‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–∫—Å–∏");
        return {{
            authCredentials: {{
                username: PROXY_USERNAME,
                password: PROXY_PASSWORD
            }}
        }};
    }}
    
    console.log("‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –¥–ª—è –Ω–∞—à–µ–≥–æ –ø—Ä–æ–∫—Å–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º");
    return {{}};
}}

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
chrome.webRequest.onAuthRequired.addListener(
    handleProxyAuth,
    {{urls: ["<all_urls>"]}},
    ["blocking"]
);

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
chrome.webRequest.onBeforeRequest.addListener(
    function(details) {{
        if (details.url.includes("decodo.com") || details.url.includes("etsy.com")) {{
            console.log("üì§ –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏:", details.url);
        }}
    }},
    {{urls: ["<all_urls>"]}},
    []
);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–æ–∫—Å–∏
chrome.webRequest.onErrorOccurred.addListener(
    function(details) {{
        if (details.error && details.error.toLowerCase().includes("proxy")) {{
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏:", details.error, "URL:", details.url);
        }}
    }},
    {{urls: ["<all_urls>"]}}
);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
chrome.webRequest.onCompleted.addListener(
    function(details) {{
        if (details.url.includes("decodo.com") || details.url.includes("etsy.com")) {{
            console.log("‚úÖ –ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω:", details.statusCode, details.url);
        }}
    }},
    {{urls: ["<all_urls>"]}}
);

console.log("üéØ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!");
"""
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
        try:
            manifest_path = os.path.join(extension_dir, "manifest.json")
            with open(manifest_path, "w", encoding='utf-8') as f:
                json.dump(manifest_content, f, indent=2, ensure_ascii=False)
            os.chmod(manifest_path, stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH)
            
            background_path = os.path.join(extension_dir, "background.js")
            with open(background_path, "w", encoding='utf-8') as f:
                f.write(background_content)
            os.chmod(background_path, stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH)
            
            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∫—Å–∏: {extension_dir}")
            logging.info(f"üìÅ –ü—É—Ç—å –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é: {extension_dir}")
            
            return extension_dir
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–æ–≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {e}")
            # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                import shutil
                shutil.rmtree(extension_dir, ignore_errors=True)
            except:
                pass
            raise e
    
    def get_chrome_args_with_proxy(self, proxy_data: Dict[str, str]) -> List[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è Chrome —Å –ø—Ä–æ–∫—Å–∏
        –≠—Ç–æ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±, —á–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        """
        proxy_server = f"{proxy_data['host']}:{proxy_data['port']}"
        
        chrome_args = [
            f"--proxy-server=http://{proxy_server}",
            "--disable-web-security",
            "--disable-features=VizDisplayCompositor",
            "--disable-extensions-except=",
            "--disable-plugins-discovery",
            "--no-first-run",
            "--no-default-browser-check",
            "--disable-default-apps",
            "--disable-popup-blocking",
            "--disable-translate",
            "--disable-background-timer-throttling",
            "--disable-renderer-backgrounding",
            "--disable-device-discovery-notifications",
            "--disable-background-networking",
            "--disable-sync",
            "--metrics-recording-only",
            "--no-report-upload",
            "--disable-dev-shm-usage",
            "--disable-gpu",
            "--remote-debugging-port=9222"
        ]
        
        logging.info(f"üîß Chrome –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–∫—Å–∏ {proxy_server} –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
        return chrome_args
    
    def create_proxy_auth_script(self, proxy_data: Dict[str, str]) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç JavaScript —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –ø—Ä–æ–∫—Å–∏
        """
        script_content = f"""
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏
(function() {{
    const username = "{proxy_data['username']}";
    const password = "{proxy_data['password']}";
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const originalAlert = window.alert;
    const originalConfirm = window.confirm;
    const originalPrompt = window.prompt;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    function autoFillAuth() {{
        const usernameField = document.querySelector('input[type="text"], input[name*="user"], input[id*="user"]');
        const passwordField = document.querySelector('input[type="password"], input[name*="pass"], input[id*="pass"]');
        
        if (usernameField && passwordField) {{
            usernameField.value = username;
            passwordField.value = password;
            
            // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
            const loginButton = document.querySelector('button[type="submit"], input[type="submit"], button:contains("–í–æ–π—Ç–∏"), button:contains("Login")');
            if (loginButton) {{
                loginButton.click();
            }}
        }}
    }}
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (document.readyState === 'loading') {{
        document.addEventListener('DOMContentLoaded', autoFillAuth);
    }} else {{
        autoFillAuth();
    }}
    
    // –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    setTimeout(autoFillAuth, 1000);
    setTimeout(autoFillAuth, 3000);
}})();
"""
        
        import tempfile
        import os
        
        script_path = os.path.join(tempfile.gettempdir(), "proxy_auth_script.js")
        with open(script_path, "w", encoding='utf-8') as f:
            f.write(script_content)
        
        logging.info(f"üìù –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {script_path}")
        return script_path
    
    def test_proxy(self, proxy_data: Dict[str, str]) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∫—Å–∏ —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ—Å—Ç–æ–≥–æ HTTP –∑–∞–ø—Ä–æ—Å–∞
        """
        try:
            import requests
            
            proxy_dict = self.format_proxy_for_requests(proxy_data)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏
            response = requests.get(
                'https://ip.decodo.com/json',
                proxies=proxy_dict,
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                logging.info(f"‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç. IP: {result.get('ip', 'unknown')}")
                return True
            else:
                logging.error(f"‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –°—Ç–∞—Ç—É—Å: {response.status_code}")
                return False
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")
            return False
    
    def get_working_proxy(self) -> Optional[Dict[str, str]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
        """
        if not self.proxies:
            return None
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        shuffled_proxies = self.proxies.copy()
        random.shuffle(shuffled_proxies)
        
        for proxy in shuffled_proxies[:5]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º—É–º 5 –ø—Ä–æ–∫—Å–∏
            logging.info(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏: {proxy['host']}:{proxy['port']}")
            if self.test_proxy(proxy):
                return proxy
        
        logging.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏!")
        return None
    
    def validate_proxy_data(self, proxy_data: Dict[str, str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏"""
        required_fields = ['host', 'port', 'username', 'password']
        
        for field in required_fields:
            if field not in proxy_data or not proxy_data[field]:
                logging.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç - —á–∏—Å–ª–æ
        try:
            port = int(proxy_data['port'])
            if not (1 <= port <= 65535):
                logging.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç: {proxy_data['port']}")
                return False
        except ValueError:
            logging.error(f"‚ùå –ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º: {proxy_data['port']}")
            return False
        
        return True
    
    def cleanup_proxy_extension(self, extension_path: str) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏"""
        try:
            import os
            import shutil
            if os.path.exists(extension_path):
                # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                try:
                    import stat
                    for root, dirs, files in os.walk(extension_path):
                        for d in dirs:
                            os.chmod(os.path.join(root, d), stat.S_IRWXU | stat.S_IRWXG | stat.S_IRWXO)
                        for f in files:
                            os.chmod(os.path.join(root, f), stat.S_IRWXU | stat.S_IRWXG | stat.S_IRWXO)
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ chmod
                
                shutil.rmtree(extension_path, ignore_errors=True)
                logging.info(f"üßπ –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ —É–¥–∞–ª–µ–Ω–æ: {extension_path}")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")
    
    def get_proxy_stats(self) -> Dict[str, int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ–∫—Å–∏"""
        return {
            'total_proxies': len(self.proxies),
            'current_index': self.current_proxy_index
        }