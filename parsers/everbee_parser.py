"""
–ü–∞—Ä—Å–µ—Ä –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤ Etsy —á–µ—Ä–µ–∑ EverBee API
"""
import logging
from typing import List, Optional
from parsers.base_parser import BaseParser
from models.product import Product
from utils.everbee_client import EverBeeClient


class EverBeeParser(BaseParser):
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤ Etsy —á–µ—Ä–µ–∑ EverBee API"""
    
    def __init__(self, config):
        super().__init__(config)
        self.everbee_client = EverBeeClient()
    
    def get_shop_name_from_url(self, url: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ URL"""
        import re
        try:
            match = re.search(r'/shop/([^/?]+)', url)
            if match:
                return match.group(1)
            return "unknown_shop"
        except:
            return "unknown_shop"
    
    def parse_shop_page(self, shop_url: str) -> List[Product]:
        """–ü–∞—Ä—Å–∏—Ç –º–∞–≥–∞–∑–∏–Ω —á–µ—Ä–µ–∑ EverBee API —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –Ω–æ–≤–∏–∑–Ω–µ"""
        shop_name = self.get_shop_name_from_url(shop_url)
        
        logging.info(f"üìÑ –ü–∞—Ä—Å–∏–º –º–∞–≥–∞–∑–∏–Ω —á–µ—Ä–µ–∑ EverBee API: {shop_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        if not self.everbee_client.ensure_token():
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shop_name}")
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç–∏–Ω–≥–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        response = self.everbee_client.get_shop_listings(
            shop_name=shop_name,
            order_by="listing_age_in_months",
            time_range="last_1_month", 
            order_direction="asc",
            page=1,
            per_page=50
        )
        
        if not response:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {shop_name}")
            return []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–∏—Å—Ç–∏–Ω–≥–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        listings = response.get('results', [])
        
        if not listings:
            logging.info(f"‚ö†Ô∏è –ù–µ—Ç –ª–∏—Å—Ç–∏–Ω–≥–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ {shop_name}")
            return []
        
        products = []
        for listing in listings:
            try:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –ª–∏—Å—Ç–∏–Ω–≥–∞ (–º–∞–∫—Å–∏–º—É–º 2 –º–µ—Å—è—Ü–∞)
                listing_age = listing.get('listing_age_in_months', 0)
                if listing_age > 2:
                    continue
                    
                product = self._parse_listing_data(listing, shop_name)
                if product:
                    products.append(product)
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ª–∏—Å—Ç–∏–Ω–≥–∞ {listing.get('listing_id', 'unknown')}: {e}")
                continue
        
        logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
        return products
    
    def _parse_listing_data(self, listing: dict, shop_name: str) -> Optional[Product]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–∏—Å—Ç–∏–Ω–≥–∞ –∏–∑ EverBee –≤ –æ–±—ä–µ–∫—Ç Product"""
        listing_id = str(listing.get('listing_id', ''))
        title = listing.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        url = listing.get('url', '')
        price = listing.get('price')
        currency = listing.get('currency_code', 'USD')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_url = None
        if 'Images' in listing:
            image_url = listing['Images']
        
        return Product(
            listing_id=listing_id,
            title=title,
            url=url,
            shop_name=shop_name,
            price=price,
            currency=currency,
            image_url=image_url
        )
    
    def close_browser(self):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
        pass