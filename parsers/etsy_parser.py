"""
–ü–∞—Ä—Å–µ—Ä –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤ Etsy —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Selenium Stealth
–í–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É 403 –æ—à–∏–±–æ–∫:
- –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ 403 –æ—Ç–≤–µ—Ç–∞ –∂–¥–µ—Ç 10 —Å–µ–∫—É–Ω–¥ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É
- –ü–æ—Å–ª–µ 3 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π
- –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Å —Ç–æ–π –∂–µ —Å—Å—ã–ª–∫–∏, –∞ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–∞–≥–∞–∑–∏–Ω—É
"""
import re
import time
from typing import List, Optional
from bs4 import BeautifulSoup
from parsers.base_parser import BaseParser
from models.product import Product
from services.browser_service import BrowserService

class EtsyParser(BaseParser):
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤ Etsy —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä"""
    
    def __init__(self, config):
        super().__init__(config)
        self.browser_service = None
    
    def get_shop_name_from_url(self, url: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ URL"""
        try:
            # –î–ª—è URL –≤–∏–¥–∞ https://www.etsy.com/shop/PiondressShop
            match = re.search(r'/shop/([^/?]+)', url)
            if match:
                return match.group(1)
            return "unknown_shop"
        except:
            return "unknown_shop"
    
    def parse_shop_page(self, shop_url: str) -> List[Product]:
        """–ü–∞—Ä—Å–∏—Ç –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞–≥–∞–∑–∏–Ω–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä"""
        all_products = []
        current_url = shop_url
        page_num = 1
        browser_restart_count = 0
        max_browser_restarts = 3
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
        if not self._initialize_browser():
            return []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if not self._load_first_page_with_browser_retry(shop_url):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
            return []
        
        # –¢–µ–ø–µ—Ä—å –ø–∞—Ä—Å–∏–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        while current_url:
            print(f"üìÑ –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_num}: {current_url}")
            
            # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            products = self._parse_single_page_with_retry(current_url, page_num == 1)
            
            if products is None:  # –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞
                if browser_restart_count < max_browser_restarts:
                    browser_restart_count += 1
                    print(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ #{browser_restart_count}/{max_browser_restarts}")
                    
                    if self._restart_browser_and_continue(current_url):
                        print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                        continue  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —Å —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
                    else:
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä")
                        break
                else:
                    print(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –±—Ä–∞—É–∑–µ—Ä–∞ ({max_browser_restarts})")
                    break
            elif products:
                all_products.extend(products)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num}: {len(products)}")
                browser_restart_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ
                
                # –ü–æ–ª—É—á–∞–µ–º URL —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                next_url = self._get_next_page_url_from_browser()
                if next_url:
                    current_url = next_url
                    page_num += 1
                    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                    time.sleep(1)
                else:
                    print("üìã –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥")
                    break
            else:
                print(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num}")
                break
        
        print(f"üéâ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(all_products)} –Ω–∞ {page_num} —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        if self.browser_service:
            # self.browser_service.close_browser()
            self.browser_service = None
        
        return all_products
    
    def _initialize_browser(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±—Ä–∞—É–∑–µ—Ä —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        if not self.browser_service:
            self.browser_service = BrowserService(self.config)
            
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        for attempt in range(3):
            if self.browser_service.setup_driver():
                return True
            else:
                print(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3 –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
                if attempt < 2:
                    time.sleep(2)
                    self.browser_service.restart_browser()
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")
                    return False
        return False
    
    def _load_first_page_with_browser_retry(self, shop_url: str) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π 403 –æ—à–∏–±–æ–∫ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –±—Ä–∞—É–∑–µ—Ä–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        max_browser_restarts = 3
        
        for browser_restart in range(max_browser_restarts):
            print(f"üöÄ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ {browser_restart + 1}/{max_browser_restarts})")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π 403
            success, need_browser_restart = self.browser_service.load_page_with_403_handling(shop_url)
            
            if success:
                print("‚úÖ –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return True
            elif need_browser_restart:
                print(f"üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ (–ø–æ–ø—ã—Ç–∫–∞ {browser_restart + 1}/{max_browser_restarts})")
                if browser_restart < max_browser_restarts - 1:
                    if not self.browser_service.restart_browser():
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä")
                        return False
                    time.sleep(2)
                else:
                    print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –±—Ä–∞—É–∑–µ—Ä–∞")
                    return False
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                return False
        
        return False
    
    def _parse_single_page_with_retry(self, page_url: str, is_first_page: bool = False) -> Optional[List[Product]]:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            return self._parse_single_page_with_browser(page_url, is_first_page)
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return None  # –°–∏–≥–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
    
    def _restart_browser_and_continue(self, current_url: str) -> bool:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        if not self.browser_service.restart_browser():
            return False
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –Ω–æ–≤–æ–º –±—Ä–∞—É–∑–µ—Ä–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π 403
        success, need_browser_restart = self.browser_service.load_page_with_403_handling(current_url)
        
        if success:
            return True
        elif need_browser_restart:
            print("‚ùå –ü–æ–ª—É—á–µ–Ω 403 –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞")
            return False
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞")
            return False
    
    def _load_first_page_with_browser(self, shop_url: str) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä"""
        print(f"üåê –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä: {shop_url}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        if self.browser_service.load_page_with_retries(shop_url):
            print("‚úÖ –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return True
        else:
            # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä
            print("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä...")
            if self.browser_service.restart_browser():
                return self.browser_service.load_page_with_retries(shop_url)
            
        return False
    
    def _parse_single_page_with_browser(self, page_url: str, is_first_page: bool = False) -> List[Product]:
        """–ü–∞—Ä—Å–∏—Ç –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–∞–≥–∞–∑–∏–Ω–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä"""
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π 403
        if not is_first_page:
            if page_url != self.browser_service.driver.current_url:
                success, need_browser_restart = self.browser_service.load_page_with_403_handling(page_url)
                if not success:
                    if need_browser_restart:
                        print(f"‚ùå –ü–æ–ª—É—á–µ–Ω 403 –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {page_url}")
                        return None  # –°–∏–≥–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
                    else:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {page_url}")
                        return []
                time.sleep(1)  # –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        if not self._handle_blocking_with_retries(page_url):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–æ–π—Ç–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
            return None  # –°–∏–≥–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
        
        # –ü–æ–ª—É—á–∞–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
        html_content = self.browser_service.get_page_source()
        
        if not html_content:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å HTML –∫–æ–Ω—Ç–µ–Ω—Ç")
            return []
        
        # –ü–∞—Ä—Å–∏–º HTML
        soup = BeautifulSoup(html_content, 'html.parser')
        
        # –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        listing_grid = soup.find('div', {'data-appears-component-name': 'shop_home_listing_grid'})
        
        if not listing_grid:
            print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ç–æ–≤–∞—Ä–∞–º–∏")
            return []
        
        # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ —Å data-listing-id
        listing_links = listing_grid.find_all('a', {'data-listing-id': True})
        
        products = []
        shop_name = self.get_shop_name_from_url(page_url)
        
        for link in listing_links:
            try:
                product = self._parse_product_element(link, shop_name)
                if product:
                    products.append(product)
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–æ–≤–∞—Ä–∞: {e}")
                continue
        
        # –ü–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–µ–ª–∞–µ–º –ø–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        self._scroll_to_pagination()
        
        return products
    
    def _handle_blocking_with_retries(self, page_url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É. –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å—Ä–∞–∑—É —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞"""
        if self._check_for_blocking():
            print("üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –ø–æ–º–æ–∂–µ—Ç")
            print("üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –Ω–æ–≤—ã–º IP/—Å–µ—Å—Å–∏–µ–π")
            return False  # –°–∏–≥–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
        else:
            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ—Ç, –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ
            return True
    
    def _check_for_blocking(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ"""
        try:
            html_content = self.browser_service.get_page_source()
            if not html_content:
                return False
            
            page_source = html_content.lower()
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑, —É–∫–∞–∑—ã–≤–∞—é—â–∏—Ö –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            blocking_phrases = [
                '–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã',
                'you have been blocked',
                'access denied',
                '–Ω–µ—á—Ç–æ –≤ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞—Å –Ω–∞—Å—Ç–æ—Ä–æ–∂–∏–ª–æ',
                '—á—Ç–æ-—Ç–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É javascript',
                '–Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä–æ–±–æ—Ç',
                '—Å–≤–µ—Ä—Ö—á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é',
                'something about your browser made us think',
                'robot in the same network',
                'blocking javascript',
                'superhuman speed'
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–∞–∑—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            for phrase in blocking_phrases:
                if phrase in page_source:
                    print(f"üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê! –ù–∞–π–¥–µ–Ω–∞ —Ñ—Ä–∞–∑–∞: '{phrase}'")
                    return True
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if 'shop_home_listing_grid' not in page_source and len(page_source) < 10000:
                print("üö´ –ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É: —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –Ω–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                return True
            
            print("‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–æ–≤ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            return False
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            return False
    
    def _get_next_page_url_from_browser(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç URL —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä"""
        if not self.browser_service or not self.browser_service.driver:
            return None
        
        html_content = self.browser_service.get_page_source()
        soup = BeautifulSoup(html_content, 'html.parser')
        
        # –ò—â–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_nav = soup.find('nav', {'data-clg-id': 'WtPagination'})
        if not pagination_nav:
            print("üìã –ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
        
        # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_links = pagination_nav.find_all('a', class_='wt-action-group__item')
        
        print(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ {len(pagination_links)} —Å—Å—ã–ª–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Å—Å—ã–ª–∫–∞—Ö
        for i, link in enumerate(pagination_links):
            page_num = link.get_text(strip=True)
            data_page = link.get('data-page')
            aria_current = link.get('aria-current')
            href = link.get('href')
            is_disabled = 'wt-is-disabled' in link.get('class', [])
            
            print(f"üîç DEBUG: –°—Å—ã–ª–∫–∞ {i}: —Ç–µ–∫—Å—Ç='{page_num}', data-page='{data_page}', aria-current='{aria_current}', disabled={is_disabled}")
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (—Å aria-current="true")
        current_page_found = False
        current_page_index = -1
        
        for i, link in enumerate(pagination_links):
            if link.get('aria-current') == 'true':
                current_page_found = True
                current_page_index = i
                current_page_text = link.get_text(strip=True)
                print(f"‚úÖ DEBUG: –ù–∞–π–¥–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page_text} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {i}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Å—ã–ª–∫–∞
                if i + 1 < len(pagination_links):
                    next_link = pagination_links[i + 1]
                    next_href = next_link.get('href')
                    next_page_text = next_link.get_text(strip=True)
                    is_next_disabled = 'wt-is-disabled' in next_link.get('class', [])
                    
                    print(f"üîç DEBUG: –°–ª–µ–¥—É—é—â–∞—è —Å—Å—ã–ª–∫–∞: —Ç–µ–∫—Å—Ç='{next_page_text}', disabled={is_next_disabled}")
                    
                    if next_href and next_link.get('data-page') and not is_next_disabled:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL
                        if next_href.startswith('http'):
                            print(f"‚û°Ô∏è –ù–∞–π–¥–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {next_href}")
                            return next_href
                        else:
                            full_url = f"https://www.etsy.com{next_href}"
                            print(f"‚û°Ô∏è –ù–∞–π–¥–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {full_url}")
                            return full_url
                    else:
                        print(f"‚ö†Ô∏è DEBUG: –°–ª–µ–¥—É—é—â–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (href={bool(next_href)}, data-page={bool(next_link.get('data-page'))}, disabled={is_next_disabled})")
                else:
                    print("‚ö†Ô∏è DEBUG: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤ —Å–ø–∏—Å–∫–µ")
                break
        
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
        if not current_page_found:
            print("‚ö†Ô∏è DEBUG: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º –∫–Ω–æ–ø–∫—É '–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞'")
            for i, link in enumerate(pagination_links):
                if link.get('data-page'):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ –∫–Ω–æ–ø–∫–∞ "—Å–ª–µ–¥—É—é—â–∞—è"
                    screen_reader_text = link.find('span', class_='wt-screen-reader-only')
                    if screen_reader_text:
                        sr_text = screen_reader_text.get_text()
                        print(f"üîç DEBUG: Screen reader —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏ {i}: '{sr_text}'")
                        
                        if '–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' in sr_text or 'Next page' in sr_text:
                            next_href = link.get('href')
                            is_disabled = 'wt-is-disabled' in link.get('class', [])
                            
                            if next_href and not is_disabled:
                                if next_href.startswith('http'):
                                    print(f"‚û°Ô∏è –ù–∞–π–¥–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É: {next_href}")
                                    return next_href
                                else:
                                    full_url = f"https://www.etsy.com{next_href}"
                                    print(f"‚û°Ô∏è –ù–∞–π–¥–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É: {full_url}")
                                    return full_url
                            else:
                                print(f"‚ö†Ô∏è DEBUG: –ö–Ω–æ–ø–∫–∞ '–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ –±–µ–∑ href")
        
        print("üìã DEBUG: –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        return None
    
    def _scroll_to_pagination(self):
        """–ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–æ–ª–ª –∫ –±–ª–æ–∫—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        try:
            if not self.browser_service or not self.browser_service.driver:
                return
            
            print("üñ±Ô∏è –ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–æ–ª–ª –∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏...")
            
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Å–∫—Ä–æ–ª–ª–∏–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
            pagination_script = """
                var paginationDiv = document.querySelector('div[data-item-pagination]');
                if (paginationDiv) {
                    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞
                    var rect = paginationDiv.getBoundingClientRect();
                    var scrollTop = window.pageYOffset || document.documentElement.scrollTop;
                    var targetPosition = rect.top + scrollTop - 200;
                    
                    // –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Å–∫—Ä–æ–ª–ª
                    window.scrollTo(0, targetPosition);
                    return true;
                } else {
                    // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º nav –≤–Ω—É—Ç—Ä–∏
                    var navPagination = document.querySelector('nav[data-clg-id="WtPagination"]');
                    if (navPagination) {
                        var rect = navPagination.getBoundingClientRect();
                        var scrollTop = window.pageYOffset || document.documentElement.scrollTop;
                        var targetPosition = rect.top + scrollTop - 20;
                        
                        window.scrollTo(0, targetPosition);
                        return true;
                    } else {
                        // –ï—Å–ª–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–∫—Ä–æ–ª–ª–∏–º –≤–Ω–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        window.scrollTo(0, document.body.scrollHeight * 0.8);
                        return false;
                    }
                }
            """
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç
            pagination_found = self.browser_service.driver.execute_script(pagination_script)
            
            if pagination_found:
                print("‚úÖ –ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–æ–ª–ª –∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            else:
                print("‚ö†Ô∏è –ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤—ã–ø–æ–ª–Ω–µ–Ω —Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            time.sleep(0.5)
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ –∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
    
    def _parse_product_element(self, link_element, shop_name: str) -> Product:
        """–ü–∞—Ä—Å–∏—Ç —ç–ª–µ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–∞"""
        listing_id = link_element.get('data-listing-id')
        product_url = link_element.get('href')
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ title –∏–ª–∏ –∏–∑ h3
        title = link_element.get('title')
        if not title:
            title_element = link_element.find('h3')
            title = title_element.get_text(strip=True) if title_element else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if product_url and not product_url.startswith('http'):
            product_url = 'https://www.etsy.com' + product_url
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ü–µ–Ω—É
        price = None
        currency = None
        price_element = link_element.find('span', class_='currency-value')
        if price_element:
            price = price_element.get_text(strip=True)
            currency_element = link_element.find('span', class_='currency-symbol')
            if currency_element:
                currency = currency_element.get_text(strip=True)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_url = None
        img_element = link_element.find('img')
        if img_element:
            image_url = img_element.get('src')
        
        return Product(
            listing_id=listing_id,
            title=title,
            url=product_url,
            shop_name=shop_name,
            price=price,
            currency=currency,
            image_url=image_url
        )